{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CancelOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelExpiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OracleRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPIRY_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOracleRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_specId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "oracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/LinkTokenReceiver.sol",
    "6": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
    "7": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
    "8": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/vendor/SafeMathChainlink.sol",
    "9": "contracts/test/MockOracle.sol"
  },
  "ast": {
    "absolutePath": "contracts/test/MockOracle.sol",
    "exportedSymbols": {
      "MockOracle": [
        297
      ]
    },
    "id": 298,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:9"
      },
      {
        "absolutePath": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/LinkTokenReceiver.sol",
        "file": "@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 298,
        "sourceUnit": 728,
        "src": "57:61:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
        "file": "@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 298,
        "sourceUnit": 761,
        "src": "119:80:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "file": "@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 298,
        "sourceUnit": 856,
        "src": "200:73:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/jasonchaskin/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.6/vendor/SafeMathChainlink.sol",
        "file": "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 298,
        "sourceUnit": 995,
        "src": "274:68:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "ChainlinkRequestInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 760,
              "src": "504:25:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ChainlinkRequestInterface_$760",
                "typeString": "contract ChainlinkRequestInterface"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "504:25:9"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 9,
              "name": "LinkTokenReceiver",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 727,
              "src": "531:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenReceiver_$727",
                "typeString": "contract LinkTokenReceiver"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "531:17:9"
          }
        ],
        "contractDependencies": [
          727,
          760
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 6,
          "nodeType": "StructuredDocumentation",
          "src": "344:136:9",
          "text": "@title The Chainlink Mock Oracle contract\n@notice Chainlink smart contract developers can use this to test their contracts"
        },
        "fullyImplemented": true,
        "id": 297,
        "linearizedBaseContracts": [
          297,
          727,
          760
        ],
        "name": "MockOracle",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 13,
            "libraryName": {
              "contractScope": null,
              "id": 11,
              "name": "SafeMathChainlink",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 994,
              "src": "559:17:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMathChainlink_$994",
                "typeString": "library SafeMathChainlink"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "553:36:9",
            "typeName": {
              "id": 12,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "581:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": true,
            "functionSelector": "4b602282",
            "id": 16,
            "mutability": "constant",
            "name": "EXPIRY_TIME",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 297,
            "src": "593:47:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "593:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "35",
              "id": 15,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "631:9:9",
              "subdenomination": "minutes",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_300_by_1",
                "typeString": "int_const 300"
              },
              "value": "5"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 19,
            "mutability": "constant",
            "name": "MINIMUM_CONSUMER_GAS_LIMIT",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 297,
            "src": "644:60:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "644:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "343030303030",
              "id": 18,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "698:6:9",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_400000_by_1",
                "typeString": "int_const 400000"
              },
              "value": "400000"
            },
            "visibility": "private"
          },
          {
            "canonicalName": "MockOracle.Request",
            "id": 24,
            "members": [
              {
                "constant": false,
                "id": 21,
                "mutability": "mutable",
                "name": "callbackAddr",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 24,
                "src": "734:20:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 20,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "734:7:9",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23,
                "mutability": "mutable",
                "name": "callbackFunctionId",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 24,
                "src": "762:25:9",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                },
                "typeName": {
                  "id": 22,
                  "name": "bytes4",
                  "nodeType": "ElementaryTypeName",
                  "src": "762:6:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Request",
            "nodeType": "StructDefinition",
            "scope": 297,
            "src": "711:81:9",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 26,
            "mutability": "mutable",
            "name": "LinkToken",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 297,
            "src": "796:37:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
              "typeString": "contract LinkTokenInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 25,
              "name": "LinkTokenInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 855,
              "src": "796:18:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                "typeString": "contract LinkTokenInterface"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 30,
            "mutability": "mutable",
            "name": "commitments",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 297,
            "src": "837:47:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
              "typeString": "mapping(bytes32 => struct MockOracle.Request)"
            },
            "typeName": {
              "id": 29,
              "keyType": {
                "id": 27,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "845:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "837:27:9",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                "typeString": "mapping(bytes32 => struct MockOracle.Request)"
              },
              "valueType": {
                "contractScope": null,
                "id": 28,
                "name": "Request",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 24,
                "src": "856:7:9",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Request_$24_storage_ptr",
                  "typeString": "struct MockOracle.Request"
                }
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 50,
            "name": "OracleRequest",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "specId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "914:22:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "914:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "requester",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "942:17:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "942:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "965:17:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 35,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "965:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "988:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 37,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "988:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "callbackAddr",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1009:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1009:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "callbackFunctionId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1035:25:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1035:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "cancelExpiration",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1066:24:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1066:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "dataVersion",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1096:19:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1096:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 50,
                  "src": "1121:10:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 47,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1121:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "908:227:9"
            },
            "src": "889:247:9"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 54,
            "name": "CancelOracleRequest",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 54,
                  "src": "1171:25:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 51,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1171:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1165:35:9"
            },
            "src": "1140:61:9"
          },
          {
            "body": {
              "id": 66,
              "nodeType": "Block",
              "src": "1433:97:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 60,
                      "name": "LinkToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "1439:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 62,
                          "name": "_link",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 57,
                          "src": "1470:5:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 61,
                        "name": "LinkTokenInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 855,
                        "src": "1451:18:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LinkTokenInterface_$855_$",
                          "typeString": "type(contract LinkTokenInterface)"
                        }
                      },
                      "id": 63,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1451:25:9",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "src": "1439:37:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                      "typeString": "contract LinkTokenInterface"
                    }
                  },
                  "id": 65,
                  "nodeType": "ExpressionStatement",
                  "src": "1439:37:9"
                }
              ]
            },
            "documentation": {
              "id": 55,
              "nodeType": "StructuredDocumentation",
              "src": "1205:185:9",
              "text": "@notice Deploy with the address of the LINK token\n@dev Sets the LinkToken address for the imported LinkTokenInterface\n@param _link The address of the LINK token"
            },
            "id": 67,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 58,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57,
                  "mutability": "mutable",
                  "name": "_link",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 67,
                  "src": "1405:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1405:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1404:15:9"
            },
            "returnParameters": {
              "id": 59,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1433:0:9"
            },
            "scope": 297,
            "src": "1393:137:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              748
            ],
            "body": {
              "id": 144,
              "nodeType": "Block",
              "src": "2502:551:9",
              "statements": [
                {
                  "assignments": [
                    94
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 94,
                      "mutability": "mutable",
                      "name": "requestId",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 144,
                      "src": "2508:17:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 93,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2508:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 102,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 98,
                            "name": "_sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70,
                            "src": "2555:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 99,
                            "name": "_nonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80,
                            "src": "2564:6:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 96,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2538:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 97,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2538:16:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2538:33:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 95,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2528:9:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2528:44:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2508:64:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 112,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 104,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "2586:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 106,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 105,
                              "name": "requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 94,
                              "src": "2598:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2586:22:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$24_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 107,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "2586:35:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 110,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2633:1:9",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 109,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2625:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 108,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2625:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2625:10:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "2586:49:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d75737420757365206120756e69717565204944",
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2637:22:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        },
                        "value": "Must use a unique ID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        }
                      ],
                      "id": 103,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2578:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2578:82:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 115,
                  "nodeType": "ExpressionStatement",
                  "src": "2578:82:9"
                },
                {
                  "assignments": [
                    117
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 117,
                      "mutability": "mutable",
                      "name": "expiration",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 144,
                      "src": "2716:18:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 116,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2716:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 122,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 120,
                        "name": "EXPIRY_TIME",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "2745:11:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 118,
                        "name": "now",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -17,
                        "src": "2737:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 119,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "add",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 884,
                      "src": "2737:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2737:20:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2716:41:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 123,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "2764:11:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 125,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 124,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 94,
                        "src": "2776:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2764:22:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$24_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 127,
                          "name": "_callbackAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "2806:16:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 128,
                          "name": "_callbackFunctionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "2832:19:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        ],
                        "id": 126,
                        "name": "Request",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24,
                        "src": "2789:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Request_$24_storage_ptr_$",
                          "typeString": "type(struct MockOracle.Request storage pointer)"
                        }
                      },
                      "id": 129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2789:68:9",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$24_memory_ptr",
                        "typeString": "struct MockOracle.Request memory"
                      }
                    },
                    "src": "2764:93:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Request_$24_storage",
                      "typeString": "struct MockOracle.Request storage ref"
                    }
                  },
                  "id": 131,
                  "nodeType": "ExpressionStatement",
                  "src": "2764:93:9"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 133,
                        "name": "_specId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "2890:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 134,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 70,
                        "src": "2905:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 135,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 94,
                        "src": "2920:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 136,
                        "name": "_payment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 72,
                        "src": "2937:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 137,
                        "name": "_callbackAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "2953:16:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 138,
                        "name": "_callbackFunctionId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "2977:19:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 139,
                        "name": "expiration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 117,
                        "src": "3004:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 140,
                        "name": "_dataVersion",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "3022:12:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 141,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "3042:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 132,
                      "name": "OracleRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "2869:13:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bytes32_$_t_uint256_$_t_address_$_t_bytes4_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes memory)"
                      }
                    },
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2869:179:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 143,
                  "nodeType": "EmitStatement",
                  "src": "2864:184:9"
                }
              ]
            },
            "documentation": {
              "id": 68,
              "nodeType": "StructuredDocumentation",
              "src": "1534:654:9",
              "text": "@notice Creates the Chainlink request\n@dev Stores the hash of the params as the on-chain commitment for the request.\nEmits OracleRequest event for the Chainlink node to detect.\n@param _sender The sender of the request\n@param _payment The amount of payment given (specified in wei)\n@param _specId The Job Specification ID\n@param _callbackAddress The callback address for the response\n@param _callbackFunctionId The callback function ID for the response\n@param _nonce The nonce sent by the requester\n@param _dataVersion The specified data version\n@param _data The CBOR payload of the request"
            },
            "functionSelector": "40429946",
            "id": 145,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [],
                "id": 88,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 87,
                  "name": "onlyLINK",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 693,
                  "src": "2446:8:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2446:10:9"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 90,
                    "name": "_callbackAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 76,
                    "src": "2482:16:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 91,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 89,
                  "name": "checkCallbackAddress",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 296,
                  "src": "2461:20:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$",
                    "typeString": "modifier (address)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2461:38:9"
              }
            ],
            "name": "oracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 86,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2433:8:9"
            },
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70,
                  "mutability": "mutable",
                  "name": "_sender",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2219:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2219:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72,
                  "mutability": "mutable",
                  "name": "_payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2240:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 71,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2240:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "_specId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2262:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2262:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76,
                  "mutability": "mutable",
                  "name": "_callbackAddress",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2283:24:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2283:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78,
                  "mutability": "mutable",
                  "name": "_callbackFunctionId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2313:26:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2313:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80,
                  "mutability": "mutable",
                  "name": "_nonce",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2345:14:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2345:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "_dataVersion",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2365:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2365:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 84,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 145,
                  "src": "2391:20:9",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 83,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2391:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2213:202:9"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2502:0:9"
            },
            "scope": 297,
            "src": "2191:862:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 193,
              "nodeType": "Block",
              "src": "3700:619:9",
              "statements": [
                {
                  "assignments": [
                    159
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 159,
                      "mutability": "mutable",
                      "name": "req",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 193,
                      "src": "3706:18:9",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$24_memory_ptr",
                        "typeString": "struct MockOracle.Request"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 158,
                        "name": "Request",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 24,
                        "src": "3706:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Request_$24_storage_ptr",
                          "typeString": "struct MockOracle.Request"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 163,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 160,
                      "name": "commitments",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "3727:11:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                        "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                      }
                    },
                    "id": 162,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 161,
                      "name": "_requestId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 148,
                      "src": "3739:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3727:23:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Request_$24_storage",
                      "typeString": "struct MockOracle.Request storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3706:44:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3756:30:9",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 164,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "3763:11:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 166,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 165,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "3775:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3763:23:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$24_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 168,
                  "nodeType": "ExpressionStatement",
                  "src": "3756:30:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 170,
                            "name": "gasleft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -7,
                            "src": "3800:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 171,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3800:9:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 172,
                          "name": "MINIMUM_CONSUMER_GAS_LIMIT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "3813:26:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3800:39:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173",
                        "id": 174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3841:34:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e41e236f8c707f430128aec8d4f13fd0193750a557f2c094e8feda34850363f4",
                          "typeString": "literal_string \"Must provide consumer enough gas\""
                        },
                        "value": "Must provide consumer enough gas"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e41e236f8c707f430128aec8d4f13fd0193750a557f2c094e8feda34850363f4",
                          "typeString": "literal_string \"Must provide consumer enough gas\""
                        }
                      ],
                      "id": 169,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3792:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3792:84:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 176,
                  "nodeType": "ExpressionStatement",
                  "src": "3792:84:9"
                },
                {
                  "assignments": [
                    178,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 178,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 193,
                      "src": "4142:12:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 177,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4142:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 190,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 184,
                              "name": "req",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "4205:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$24_memory_ptr",
                                "typeString": "struct MockOracle.Request memory"
                              }
                            },
                            "id": 185,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "callbackFunctionId",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 23,
                            "src": "4205:22:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 186,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 148,
                            "src": "4229:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 187,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 150,
                            "src": "4241:5:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 182,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4182:3:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4182:22:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 188,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4182:65:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 179,
                          "name": "req",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 159,
                          "src": "4160:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$24_memory_ptr",
                            "typeString": "struct MockOracle.Request memory"
                          }
                        },
                        "id": 180,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "callbackAddr",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 21,
                        "src": "4160:16:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 181,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "4160:21:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 189,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4160:88:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4141:107:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 191,
                    "name": "success",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 178,
                    "src": "4307:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 157,
                  "id": 192,
                  "nodeType": "Return",
                  "src": "4300:14:9"
                }
              ]
            },
            "documentation": {
              "id": 146,
              "nodeType": "StructuredDocumentation",
              "src": "3057:498:9",
              "text": "@notice Called by the Chainlink node to fulfill requests\n@dev Given params must hash back to the commitment stored from `oracleRequest`.\nWill call the callback address' callback function without bubbling up error\nchecking in a `require` so that the node can get paid.\n@param _requestId The fulfillment request ID that must match the requester's\n@param _data The data to return to the consuming contract\n@return Status if the external call was successful"
            },
            "functionSelector": "1f8f238c",
            "id": 194,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 153,
                    "name": "_requestId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 148,
                    "src": "3667:10:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 154,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 152,
                  "name": "isValidRequest",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 279,
                  "src": "3652:14:9",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_bytes32_$",
                    "typeString": "modifier (bytes32)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3652:26:9"
              }
            ],
            "name": "fulfillOracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 148,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 194,
                  "src": "3593:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 147,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3593:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 150,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 194,
                  "src": "3617:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 149,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3617:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3587:47:9"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 156,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 194,
                  "src": "3692:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 155,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3692:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3691:6:9"
            },
            "scope": 297,
            "src": "3558:761:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              759
            ],
            "body": {
              "id": 245,
              "nodeType": "Block",
              "src": "4961:337:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 208,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "4975:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 210,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 209,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 197,
                              "src": "4987:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4975:23:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$24_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 211,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "4975:36:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 214,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5023:1:9",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 213,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5015:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 212,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5015:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5015:10:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "4975:50:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d75737420757365206120756e69717565204944",
                        "id": 217,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5027:22:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        },
                        "value": "Must use a unique ID"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_da89408418f1aa3860811d2e64085e2b94d33f2815f2070010f4d0def719e723",
                          "typeString": "literal_string \"Must use a unique ID\""
                        }
                      ],
                      "id": 207,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4967:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 218,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4967:83:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 219,
                  "nodeType": "ExpressionStatement",
                  "src": "4967:83:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 223,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 221,
                          "name": "_expiration",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 203,
                          "src": "5114:11:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 222,
                          "name": "now",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -17,
                          "src": "5129:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5114:18:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "52657175657374206973206e6f742065787069726564",
                        "id": 224,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5134:24:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4469681584edb09f4c5168c152dcbc615ee04be0f2982d1d010c0509f79b076c",
                          "typeString": "literal_string \"Request is not expired\""
                        },
                        "value": "Request is not expired"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4469681584edb09f4c5168c152dcbc615ee04be0f2982d1d010c0509f79b076c",
                          "typeString": "literal_string \"Request is not expired\""
                        }
                      ],
                      "id": 220,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5106:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5106:53:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 226,
                  "nodeType": "ExpressionStatement",
                  "src": "5106:53:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "5166:30:9",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 227,
                        "name": "commitments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "5173:11:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                          "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                        }
                      },
                      "id": 229,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 228,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 197,
                        "src": "5185:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5173:23:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Request_$24_storage",
                        "typeString": "struct MockOracle.Request storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 231,
                  "nodeType": "ExpressionStatement",
                  "src": "5166:30:9"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 233,
                        "name": "_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 197,
                        "src": "5227:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 232,
                      "name": "CancelOracleRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 54,
                      "src": "5207:19:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32)"
                      }
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5207:31:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 235,
                  "nodeType": "EmitStatement",
                  "src": "5202:36:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 239,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5271:3:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 240,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "5271:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 241,
                            "name": "_payment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 199,
                            "src": "5283:8:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 237,
                            "name": "LinkToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26,
                            "src": "5252:9:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                              "typeString": "contract LinkTokenInterface"
                            }
                          },
                          "id": 238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 832,
                          "src": "5252:18:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 242,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5252:40:9",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 236,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "5245:6:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 243,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5245:48:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 244,
                  "nodeType": "ExpressionStatement",
                  "src": "5245:48:9"
                }
              ]
            },
            "documentation": {
              "id": 195,
              "nodeType": "StructuredDocumentation",
              "src": "4323:491:9",
              "text": "@notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\nsent for the request back to the requester's address.\n@dev Given params must hash to a commitment stored on the contract in order for the request to be valid\nEmits CancelOracleRequest event.\n@param _requestId The request ID\n@param _payment The amount of payment given (specified in wei)\n@param _expiration The time of the expiration for the request"
            },
            "functionSelector": "6ee4d553",
            "id": 246,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cancelOracleRequest",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 205,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4950:8:9"
            },
            "parameters": {
              "id": 204,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 197,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 246,
                  "src": "4851:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 196,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4851:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 199,
                  "mutability": "mutable",
                  "name": "_payment",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 246,
                  "src": "4875:16:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 198,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4875:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 201,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 246,
                  "src": "4897:6:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 200,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "4897:6:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 203,
                  "mutability": "mutable",
                  "name": "_expiration",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 246,
                  "src": "4909:19:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 202,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4909:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4845:87:9"
            },
            "returnParameters": {
              "id": 206,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4961:0:9"
            },
            "scope": 297,
            "src": "4817:481:9",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              679
            ],
            "body": {
              "id": 258,
              "nodeType": "Block",
              "src": "5587:36:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 255,
                        "name": "LinkToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26,
                        "src": "5608:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                          "typeString": "contract LinkTokenInterface"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                          "typeString": "contract LinkTokenInterface"
                        }
                      ],
                      "id": 254,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "5600:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 253,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5600:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": null,
                          "typeString": null
                        }
                      }
                    },
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5600:18:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 252,
                  "id": 257,
                  "nodeType": "Return",
                  "src": "5593:25:9"
                }
              ]
            },
            "documentation": {
              "id": 247,
              "nodeType": "StructuredDocumentation",
              "src": "5302:196:9",
              "text": "@notice Returns the address of the LINK token\n@dev This is the public implementation for chainlinkTokenAddress, which is\nan internal method of the ChainlinkClient contract"
            },
            "functionSelector": "165d35e1",
            "id": 259,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getChainlinkToken",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 249,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5554:8:9"
            },
            "parameters": {
              "id": 248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5527:2:9"
            },
            "returnParameters": {
              "id": 252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 251,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 259,
                  "src": "5576:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 250,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5576:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5575:9:9"
            },
            "scope": 297,
            "src": "5501:122:9",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 278,
              "nodeType": "Block",
              "src": "5823:108:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 265,
                              "name": "commitments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "5837:11:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Request_$24_storage_$",
                                "typeString": "mapping(bytes32 => struct MockOracle.Request storage ref)"
                              }
                            },
                            "id": 267,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 266,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 262,
                              "src": "5849:10:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5837:23:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$24_storage",
                              "typeString": "struct MockOracle.Request storage ref"
                            }
                          },
                          "id": 268,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "callbackAddr",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "5837:36:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 271,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5885:1:9",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5877:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 269,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5877:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 272,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5877:10:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5837:50:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d757374206861766520612076616c696420726571756573744964",
                        "id": 274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5889:29:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_03ea8cfeff0459e125641b51ffaeaacb881b172abb4a1cae381360ba7e33f193",
                          "typeString": "literal_string \"Must have a valid requestId\""
                        },
                        "value": "Must have a valid requestId"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_03ea8cfeff0459e125641b51ffaeaacb881b172abb4a1cae381360ba7e33f193",
                          "typeString": "literal_string \"Must have a valid requestId\""
                        }
                      ],
                      "id": 264,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5829:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5829:90:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 276,
                  "nodeType": "ExpressionStatement",
                  "src": "5829:90:9"
                },
                {
                  "id": 277,
                  "nodeType": "PlaceholderStatement",
                  "src": "5925:1:9"
                }
              ]
            },
            "documentation": {
              "id": 260,
              "nodeType": "StructuredDocumentation",
              "src": "5643:133:9",
              "text": "@dev Reverts if request ID does not exist\n@param _requestId The given request ID to check in stored `commitments`"
            },
            "id": 279,
            "name": "isValidRequest",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "_requestId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 279,
                  "src": "5803:18:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 261,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5803:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5802:20:9"
            },
            "src": "5779:152:9",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 295,
              "nodeType": "Block",
              "src": "6088:79:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 285,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 282,
                          "src": "6102:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 288,
                              "name": "LinkToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26,
                              "src": "6117:9:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                                "typeString": "contract LinkTokenInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$855",
                                "typeString": "contract LinkTokenInterface"
                              }
                            ],
                            "id": 287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6109:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 286,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6109:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6109:18:9",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6102:25:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6e6f742063616c6c6261636b20746f204c494e4b",
                        "id": 291,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6129:25:9",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c91bf1db15c019a879a37eef54af733a5f0801faedda1a37e217ea60f3cdcf4",
                          "typeString": "literal_string \"Cannot callback to LINK\""
                        },
                        "value": "Cannot callback to LINK"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c91bf1db15c019a879a37eef54af733a5f0801faedda1a37e217ea60f3cdcf4",
                          "typeString": "literal_string \"Cannot callback to LINK\""
                        }
                      ],
                      "id": 284,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6094:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6094:61:9",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 293,
                  "nodeType": "ExpressionStatement",
                  "src": "6094:61:9"
                },
                {
                  "id": 294,
                  "nodeType": "PlaceholderStatement",
                  "src": "6161:1:9"
                }
              ]
            },
            "documentation": {
              "id": 280,
              "nodeType": "StructuredDocumentation",
              "src": "5936:106:9",
              "text": "@dev Reverts if the callback address is the LINK token\n@param _to The callback address"
            },
            "id": 296,
            "name": "checkCallbackAddress",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 282,
                  "mutability": "mutable",
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 296,
                  "src": "6075:11:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 281,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6075:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6074:13:9"
            },
            "src": "6045:122:9",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 298,
        "src": "481:5689:9"
      }
    ],
    "src": "32:6139:9"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610c5c380380610c5c8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610bf7806100656000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063165d35e1146100675780631f8f238c1461008b57806340429946146100c25780634b602282146101755780636ee4d5531461018f578063a4c0ed36146101c8575b600080fd5b61006f610283565b604080516001600160a01b039092168252519081900360200190f35b6100ae600480360360408110156100a157600080fd5b5080359060200135610292565b604080519115158252519081900360200190f35b61017360048036036101008110156100d957600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561013457600080fd5b82018360208201111561014657600080fd5b8035906020019184600183028401116401000000008311171561016857600080fd5b5090925090506104a9565b005b61017d610798565b60408051918252519081900360200190f35b610173600480360360808110156101a557600080fd5b508035906020810135906001600160e01b0319604082013516906060013561079e565b610173600480360360608110156101de57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561020e57600080fd5b82018360208201111561022057600080fd5b8035906020019184600183028401116401000000008311171561024257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061091c945050505050565b6000546001600160a01b031690565b60008281526001602052604081205483906001600160a01b03166102fd576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b610305610baa565b506000848152600160208181526040808420815180830190925280546001600160a01b03811683526001600160e01b0319600160a01b820460e01b168385015294899052929091526001600160c01b0319909216905562061a805a10156103b3576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b805160208083015160408051602481018a905260448082018a9052825180830390910181526064909101825292830180516001600160e01b03166001600160e01b03199093169290921782525182516000946001600160a01b0316939282918083835b602083106104355780518252601f199092019160209182019101610416565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610497576040519150601f19603f3d011682016040523d82523d6000602084013e61049c565b606091505b5090979650505050505050565b6104b1610283565b6001600160a01b0316336001600160a01b03161461050c576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60005486906001600160a01b0380831691161415610571576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526001909252919020546001600160a01b031615610614576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b60006106284261012c63ffffffff610b4916565b905060405180604001604052808a6001600160a01b03168152602001896001600160e01b0319168152506001600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908360e01c0217905550905050897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b61012c81565b6000848152600160205260409020546001600160a01b03166107fe576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b4281111561084c576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b60008481526001602052604080822080546001600160c01b03191690555185917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2600080546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b505050506040513d602081101561090e57600080fd5b505161091657fe5b50505050565b610924610283565b6001600160a01b0316336001600160a01b03161461097f576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b80518190604411156109d1576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610a3d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610a855780518252601f199092019160209182019101610a66565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5050905080610b40576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b600082820183811015610ba3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60408051808201909152600080825260208201529056fea264697066735822122022fc73c78e02c3f4722ced353717f78a57bba83306cfe1378d48fb28fbcb79a164736f6c63430006060033",
  "bytecodeSha1": "5633630ef821d52f66f0d72e2e85f796c37885cd",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.6+commit.6c089d02"
  },
  "contractName": "MockOracle",
  "coverageMap": {
    "branches": {
      "0": {
        "LinkTokenReceiver.onTokenTransfer": {
          "18": [
            1584,
            1617,
            true
          ],
          "19": [
            1372,
            1379,
            true
          ]
        }
      },
      "6": {},
      "7": {},
      "8": {
        "SafeMathChainlink.add": {
          "20": [
            967,
            973,
            true
          ]
        }
      },
      "9": {
        "MockOracle.cancelOracleRequest": {
          "17": [
            5114,
            5132,
            true
          ]
        },
        "MockOracle.fulfillOracleRequest": {
          "14": [
            3800,
            3839,
            true
          ]
        },
        "MockOracle.oracleRequest": {
          "15": [
            6102,
            6127,
            true
          ],
          "16": [
            2586,
            2635,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "LinkTokenReceiver.onTokenTransfer": {
          "11": [
            1364,
            1408
          ]
        }
      },
      "6": {},
      "7": {},
      "8": {
        "SafeMathChainlink.add": {
          "12": [
            959,
            1005
          ],
          "13": [
            1012,
            1020
          ]
        }
      },
      "9": {
        "MockOracle.cancelOracleRequest": {
          "6": [
            4967,
            5050
          ],
          "7": [
            5106,
            5159
          ],
          "8": [
            5166,
            5196
          ],
          "9": [
            5202,
            5238
          ],
          "10": [
            5245,
            5293
          ]
        },
        "MockOracle.fulfillOracleRequest": {
          "1": [
            3756,
            3786
          ],
          "2": [
            3792,
            3876
          ]
        },
        "MockOracle.getChainlinkToken": {
          "0": [
            5593,
            5618
          ]
        },
        "MockOracle.oracleRequest": {
          "3": [
            2578,
            2660
          ],
          "4": [
            2764,
            2857
          ],
          "5": [
            2864,
            3048
          ]
        }
      }
    }
  },
  "dependencies": [
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/ChainlinkRequestInterface",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/LinkTokenInterface",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/LinkTokenReceiver",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/SafeMathChainlink"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c8063165d35e1146100675780631f8f238c1461008b57806340429946146100c25780634b602282146101755780636ee4d5531461018f578063a4c0ed36146101c8575b600080fd5b61006f610283565b604080516001600160a01b039092168252519081900360200190f35b6100ae600480360360408110156100a157600080fd5b5080359060200135610292565b604080519115158252519081900360200190f35b61017360048036036101008110156100d957600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561013457600080fd5b82018360208201111561014657600080fd5b8035906020019184600183028401116401000000008311171561016857600080fd5b5090925090506104a9565b005b61017d610798565b60408051918252519081900360200190f35b610173600480360360808110156101a557600080fd5b508035906020810135906001600160e01b0319604082013516906060013561079e565b610173600480360360608110156101de57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561020e57600080fd5b82018360208201111561022057600080fd5b8035906020019184600183028401116401000000008311171561024257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061091c945050505050565b6000546001600160a01b031690565b60008281526001602052604081205483906001600160a01b03166102fd576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b610305610baa565b506000848152600160208181526040808420815180830190925280546001600160a01b03811683526001600160e01b0319600160a01b820460e01b168385015294899052929091526001600160c01b0319909216905562061a805a10156103b3576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b805160208083015160408051602481018a905260448082018a9052825180830390910181526064909101825292830180516001600160e01b03166001600160e01b03199093169290921782525182516000946001600160a01b0316939282918083835b602083106104355780518252601f199092019160209182019101610416565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610497576040519150601f19603f3d011682016040523d82523d6000602084013e61049c565b606091505b5090979650505050505050565b6104b1610283565b6001600160a01b0316336001600160a01b03161461050c576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60005486906001600160a01b0380831691161415610571576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526001909252919020546001600160a01b031615610614576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b60006106284261012c63ffffffff610b4916565b905060405180604001604052808a6001600160a01b03168152602001896001600160e01b0319168152506001600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908360e01c0217905550905050897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b61012c81565b6000848152600160205260409020546001600160a01b03166107fe576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b4281111561084c576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b60008481526001602052604080822080546001600160c01b03191690555185917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2600080546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b505050506040513d602081101561090e57600080fd5b505161091657fe5b50505050565b610924610283565b6001600160a01b0316336001600160a01b03161461097f576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b80518190604411156109d1576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610a3d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610a855780518252601f199092019160209182019101610a66565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5050905080610b40576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b600082820183811015610ba3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60408051808201909152600080825260208201529056fea264697066735822122022fc73c78e02c3f4722ced353717f78a57bba83306cfe1378d48fb28fbcb79a164736f6c63430006060033",
  "deployedSourceMap": "481:5689:9:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;481:5689:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;5501:122:9;;;:::i;:::-;;;;-1:-1:-1;;;;;5501:122:9;;;;;;;;;;;;;;3558:761;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3558:761:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2191:862;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;2191:862:9;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2191:862:9;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;2191:862:9;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;2191:862:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2191:862:9;;-1:-1:-1;2191:862:9;-1:-1:-1;2191:862:9;:::i;:::-;;593:47;;;:::i;:::-;;;;;;;;;;;;;;;;4817:481;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;4817:481:9;;;;;;;;-1:-1:-1;;;;;;4817:481:9;;;;;;;;;;:::i;750:663:0:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;750:663:0;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;750:663:0;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;750:663:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;750:663:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;750:663:0;;-1:-1:-1;750:663:0;;-1:-1:-1;;;;;750:663:0:i;5501:122:9:-;5576:7;5608:9;-1:-1:-1;;;;;5608:9:9;5501:122;:::o;3558:761::-;3692:4;5837:23;;;:11;:23;;;;;:36;3667:10;;-1:-1:-1;;;;;5837:36:9;5829:90;;;;;-1:-1:-1;;;5829:90:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;3706:18:::1;;:::i;:::-;-1:-1:-1::0;3727:23:9::1;::::0;;;:11:::1;:23;::::0;;;;;;;3706:44;;;;::::1;::::0;;;;;-1:-1:-1;;;;;3706:44:9;::::1;::::0;;-1:-1:-1;;;;;;;;;3706:44:9;::::1;;;;::::0;;::::1;::::0;3763:23;;;;;;;;-1:-1:-1;;;;;;3756:30:9;;;;;698:6:::1;3800:9;:39;;3792:84;;;::::0;;-1:-1:-1;;;3792:84:9;;::::1;;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4160:16:::0;;4205:22:::1;::::0;;::::1;::::0;4182:65:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;4182:65:9;;;;;;25:18:-1;;::::1;61:17:::0;;-1:-1;;;;;182:15:::1;-1:-1:::0;;;;;;4182:65:9;;::::1;179:29:-1::0;;;::::1;160:49:::0;;4160:88:9;;;4142:12:::1;::::0;-1:-1:-1;;;;;4160:21:9::1;::::0;4182:65;4160:88;;;;25:18:-1;36:153:::1;66:2;61:3;58:11;36:153;;176:10:::0;;164:23;;-1:-1;;139:12;;;;98:2:::1;89:12:::0;;::::1;::::0;114::::1;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4160:88:9;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;-1:-1:::0;4141:107:9;;3558:761;-1:-1:-1;;;;;;;3558:761:9:o;2191:862::-;1598:19:0;:17;:19::i;:::-;-1:-1:-1;;;;;1584:33:0;:10;-1:-1:-1;;;;;1584:33:0;;1576:65;;;;;-1:-1:-1;;;1576:65:0;;;;;;;;;;;;-1:-1:-1;;;1576:65:0;;;;;;;;;;;;;;;6117:9:9::1;::::0;2482:16;;-1:-1:-1;;;;;6102:25:9;;::::1;6117:9:::0;::::1;6102:25;;6094:61;;;::::0;;-1:-1:-1;;;6094:61:9;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2538:33:::2;::::0;;-1:-1:-1;;2538:33:9::2;::::0;;;;::::2;::::0;;::::2;::::0;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2538:33:9;;;;;;2528:44;;;;::::2;::::0;;;;2508:17:::2;2586:22:::0;;;:11:::2;:22:::0;;;;;;:35;-1:-1:-1;;;;;2586:35:9::2;:49:::0;2578:82:::2;;;::::0;;-1:-1:-1;;;2578:82:9;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;-1:-1:-1;;;2578:82:9;;;;;;;;;;;;;::::2;;2716:18;2737:20;:3;631:9;2737:20;:7;:20;:::i;:::-;2716:41;;2789:68;;;;;;;;2806:16;-1:-1:-1::0;;;;;2789:68:9::2;;;;;2832:19;-1:-1:-1::0;;;;;2789:68:9::2;;;;::::0;2764:11:::2;:22;2776:9;2764:22;;;;;;;;;;;:93;;;;;;;;;;;;;-1:-1:-1::0;;;;;2764:93:9::2;;;;;-1:-1:-1::0;;;;;2764:93:9::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2890:7;2869:179;2905:7;2920:9;2937:8;2953:16;2977:19;3004:10;3022:12;3042:5;;2869:179;;;;-1:-1:-1::0;;;;;2869:179:9::2;-1:-1:-1::0;;;;;2869:179:9::2;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;2869:179:9::2;-1:-1:-1::0;;;;;2869:179:9::2;;;;;;-1:-1:-1::0;;;;;2869:179:9::2;;-1:-1:-1::0;;;;;2869:179:9::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;;::::2;74:27:::0;2869:179:9::2;::::0;137:4:-1::2;117:14:::0;;::::2;-1:-1:::0;;113:30:::2;157:16:::0;;::::2;2869:179:9::0;;::::2;::::0;-1:-1:-1;2869:179:9;;-1:-1:-1;;;;;;;;;;;2869:179:9::2;6161:1;;1647::0::1;2191:862:9::0;;;;;;;;;:::o;593:47::-;631:9;593:47;:::o;4817:481::-;5023:1;4975:23;;;:11;:23;;;;;:36;-1:-1:-1;;;;;4975:36:9;4967:83;;;;;-1:-1:-1;;;4967:83:9;;;;;;;;;;;;-1:-1:-1;;;4967:83:9;;;;;;;;;;;;;;;5129:3;5114:11;:18;;5106:53;;;;;-1:-1:-1;;;5106:53:9;;;;;;;;;;;;-1:-1:-1;;;5106:53:9;;;;;;;;;;;;;;;5173:23;;;;:11;:23;;;;;;5166:30;;-1:-1:-1;;;;;;5166:30:9;;;5207:31;5185:10;;5207:31;;;5252:9;;;:40;;;-1:-1:-1;;;5252:40:9;;5271:10;5252:40;;;;;;;;;;;;-1:-1:-1;;;;;5252:9:9;;;;:18;;:40;;;;;;;;;;;;;;;;;:9;:40;;;2:2:-1;;;;27:1;24;17:12;2:2;5252:40:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5252:40:9;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5252:40:9;5245:48;;;;4817:481;;;;:::o;750:663:0:-;1598:19;:17;:19::i;:::-;-1:-1:-1;;;;;1584:33:0;:10;-1:-1:-1;;;;;1584:33:0;;1576:65;;;;;-1:-1:-1;;;1576:65:0;;;;;;;;;;;;-1:-1:-1;;;1576:65:0;;;;;;;;;;;;;;;2310:12;;892:5;;315:47;-1:-1:-1;2310:38:0::1;2302:73;;;::::0;;-1:-1:-1;;;2302:73:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2302:73:0;;;;;;;;;;;;;::::1;;2006:2:::2;1995:14:::0;::::2;1989:21:::0;929:5;;-1:-1:-1;;;;;;2029:39:0;::::2;-1:-1:-1::0;;;2029:39:0::2;2021:82;;;::::0;;-1:-1:-1;;;2021:82:0;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;1041:7:::3;1036:2;1029:5;1025:14;1018:31;1171:7;1166:2;1159:5;1155:14;1148:31;1284:12;1310:4;-1:-1:-1::0;;;;;1302:26:0::3;1329:5;1302:33;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10:::0;;164:23;;-1:-1;;139:12;;;;98:2:::3;89:12:::0;;::::3;::::0;114::::3;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1302:33:0;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;1283:52:0;;;1372:7;1364:44;;;::::0;;-1:-1:-1;;;1364:44:0;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;2109:1;2381::::2;;1647::::1;750:663:::0;;;:::o;863:162:8:-;921:7;948:5;;;967:6;;;;959:46;;;;;-1:-1:-1;;;959:46:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;1019:1;863:162;-1:-1:-1;;;863:162:8:o;481:5689:9:-;;;;;;;;;;-1:-1:-1;481:5689:9;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
        "notice": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address.",
        "params": {
          "_expiration": "The time of the expiration for the request",
          "_payment": "The amount of payment given (specified in wei)",
          "_requestId": "The request ID"
        }
      },
      "constructor": {
        "details": "Sets the LinkToken address for the imported LinkTokenInterface",
        "params": {
          "_link": "The address of the LINK token"
        }
      },
      "fulfillOracleRequest(bytes32,bytes32)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "notice": "Called by the Chainlink node to fulfill requests",
        "params": {
          "_data": "The data to return to the consuming contract",
          "_requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "getChainlinkToken()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract",
        "notice": "Returns the address of the LINK token"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
        "notice": "Called when LINK is sent to the contract via `transferAndCall`",
        "params": {
          "_amount": "Amount of LINK sent (specified in wei)",
          "_data": "Payload of the transaction",
          "_sender": "Address of the sender"
        }
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
        "notice": "Creates the Chainlink request",
        "params": {
          "_callbackAddress": "The callback address for the response",
          "_callbackFunctionId": "The callback function ID for the response",
          "_data": "The CBOR payload of the request",
          "_dataVersion": "The specified data version",
          "_nonce": "The nonce sent by the requester",
          "_payment": "The amount of payment given (specified in wei)",
          "_sender": "The sender of the request",
          "_specId": "The Job Specification ID"
        }
      }
    },
    "notice": "Chainlink smart contract developers can use this to test their contracts",
    "title": "The Chainlink Mock Oracle contract"
  },
  "offset": [
    481,
    6170
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x165D35E1 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x1F8F238C EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x40429946 EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x4B602282 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x6EE4D553 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x1C8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x100 DUP2 ADD PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17D PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x1A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x79E JUMP JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x91C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2FD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206861766520612076616C6964207265717565737449640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x305 PUSH2 0xBAA JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV PUSH1 0xE0 SHL AND DUP4 DUP6 ADD MSTORE SWAP5 DUP10 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND SWAP1 SSTORE PUSH3 0x61A80 GAS LT ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP11 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP3 MSTORE SWAP3 DUP4 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 SWAP3 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x435 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x416 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x49C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4B1 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x50C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x571 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP14 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x54 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x614 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x628 TIMESTAMP PUSH2 0x12C PUSH4 0xFFFFFFFF PUSH2 0xB49 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE POP PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0xE0 SHR MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP10 PUSH32 0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65 DUP14 DUP5 DUP15 DUP14 DUP14 DUP8 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP13 POP SWAP1 SWAP11 POP POP POP POP POP POP POP POP POP POP POP LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12C DUP2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7FE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 GT ISZERO PUSH2 0x84C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP6 SWAP2 PUSH32 0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH1 0x44 DUP1 DUP5 ADD SWAP4 PUSH1 0x20 SWAP4 SWAP1 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x916 JUMPI INVALID JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x924 PUSH2 0x283 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x97F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 SWAP1 PUSH1 0x44 GT ISZERO PUSH2 0x9D1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20214CA3 PUSH1 0xE1 SHL EQ PUSH2 0xA3D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374207573652077686974656C69737465642066756E6374696F6E730000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x24 DUP6 ADD MSTORE DUP5 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xA85 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xA66 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xAE5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB40 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E61626C6520746F2063726561746520726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xFC PUSH20 0xC78E02C3F4722CED353717F78A57BBA83306CFE1 CALLDATACOPY DUP14 0x48 0xFB 0x28 0xFB 0xCB PUSH26 0xA164736F6C634300060600330000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "5": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "CALLVALUE",
      "path": "9"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH2",
      "value": "0x10"
    },
    "11": {
      "op": "JUMPI"
    },
    "12": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "14": {
      "op": "DUP1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "REVERT",
      "path": "9"
    },
    "16": {
      "op": "JUMPDEST"
    },
    "17": {
      "offset": [
        481,
        6170
      ],
      "op": "POP",
      "path": "9"
    },
    "18": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "CALLDATASIZE",
      "path": "9"
    },
    "21": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "LT",
      "path": "9"
    },
    "22": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x62"
    },
    "25": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "26": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "29": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "SHR",
      "path": "9"
    },
    "32": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "33": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0x165D35E1"
    },
    "38": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "39": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x67"
    },
    "42": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "43": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "44": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0x1F8F238C"
    },
    "49": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "50": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x8B"
    },
    "53": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "54": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "55": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0x40429946"
    },
    "60": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "61": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xC2"
    },
    "64": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "65": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "66": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0x4B602282"
    },
    "71": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "72": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x175"
    },
    "75": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "76": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "77": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0x6EE4D553"
    },
    "82": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "83": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x18F"
    },
    "86": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "87": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "88": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xA4C0ED36"
    },
    "93": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "EQ",
      "path": "9"
    },
    "94": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1C8"
    },
    "97": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "98": {
      "fn": null,
      "offset": [
        481,
        6170
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "99": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "101": {
      "op": "DUP1"
    },
    "102": {
      "first_revert": true,
      "op": "REVERT"
    },
    "103": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "104": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x6F"
    },
    "107": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x283"
    },
    "110": {
      "fn": "MockOracle.getChainlinkToken",
      "jump": "i",
      "offset": [
        5501,
        5623
      ],
      "op": "JUMP",
      "path": "9"
    },
    "111": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "112": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "114": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "DUP1",
      "path": "9"
    },
    "115": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "120": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "122": {
      "op": "SHL"
    },
    "123": {
      "op": "SUB"
    },
    "124": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "125": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "126": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "AND",
      "path": "9"
    },
    "127": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "DUP3",
      "path": "9"
    },
    "128": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "129": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "130": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "131": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "DUP2",
      "path": "9"
    },
    "132": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "133": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SUB",
      "path": "9"
    },
    "134": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "136": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "ADD",
      "path": "9"
    },
    "137": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "138": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "RETURN",
      "path": "9"
    },
    "139": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "140": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xAE"
    },
    "143": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "145": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "DUP1",
      "path": "9"
    },
    "146": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "CALLDATASIZE",
      "path": "9"
    },
    "147": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SUB",
      "path": "9"
    },
    "148": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "150": {
      "op": "DUP2"
    },
    "151": {
      "op": "LT"
    },
    "152": {
      "op": "ISZERO"
    },
    "153": {
      "op": "PUSH2",
      "value": "0xA1"
    },
    "156": {
      "op": "JUMPI"
    },
    "157": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "159": {
      "op": "DUP1"
    },
    "160": {
      "op": "REVERT"
    },
    "161": {
      "op": "JUMPDEST"
    },
    "162": {
      "op": "POP"
    },
    "163": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "DUP1",
      "path": "9"
    },
    "164": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "165": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "166": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "168": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "ADD",
      "path": "9"
    },
    "169": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "170": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x292"
    },
    "173": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "i",
      "offset": [
        3558,
        4319
      ],
      "op": "JUMP",
      "path": "9"
    },
    "174": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "175": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "177": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "DUP1",
      "path": "9"
    },
    "178": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "179": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "180": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "181": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "182": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "DUP3",
      "path": "9"
    },
    "183": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "184": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "185": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "186": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "DUP2",
      "path": "9"
    },
    "187": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "188": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SUB",
      "path": "9"
    },
    "189": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "191": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "ADD",
      "path": "9"
    },
    "192": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "193": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "RETURN",
      "path": "9"
    },
    "194": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "195": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x173"
    },
    "198": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "200": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP1",
      "path": "9"
    },
    "201": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATASIZE",
      "path": "9"
    },
    "202": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SUB",
      "path": "9"
    },
    "203": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "206": {
      "op": "DUP2"
    },
    "207": {
      "op": "LT"
    },
    "208": {
      "op": "ISZERO"
    },
    "209": {
      "op": "PUSH2",
      "value": "0xD9"
    },
    "212": {
      "op": "JUMPI"
    },
    "213": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "215": {
      "op": "DUP1"
    },
    "216": {
      "op": "REVERT"
    },
    "217": {
      "op": "JUMPDEST"
    },
    "218": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "220": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "222": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "224": {
      "op": "SHL"
    },
    "225": {
      "op": "SUB"
    },
    "226": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "227": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "228": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP2",
      "path": "9"
    },
    "229": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "AND",
      "path": "9"
    },
    "230": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "231": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "233": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP2",
      "path": "9"
    },
    "234": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "235": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "236": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "237": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "239": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "240": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "241": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "242": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "243": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x60"
    },
    "245": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP4",
      "path": "9"
    },
    "246": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "247": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "248": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "AND",
      "path": "9"
    },
    "249": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "254": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "256": {
      "op": "SHL"
    },
    "257": {
      "op": "SUB"
    },
    "258": {
      "op": "NOT"
    },
    "259": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x80"
    },
    "261": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "262": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "263": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "264": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "AND",
      "path": "9"
    },
    "265": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "266": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xA0"
    },
    "268": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "269": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "270": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "271": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "272": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xC0"
    },
    "274": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP2",
      "path": "9"
    },
    "275": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "276": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "277": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "278": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP2",
      "path": "9"
    },
    "279": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "280": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "281": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x100"
    },
    "284": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP2",
      "path": "9"
    },
    "285": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "286": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xE0"
    },
    "288": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "289": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "290": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "291": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "297": {
      "op": "DUP2"
    },
    "298": {
      "op": "GT"
    },
    "299": {
      "op": "ISZERO"
    },
    "300": {
      "op": "PUSH2",
      "value": "0x134"
    },
    "303": {
      "op": "JUMPI"
    },
    "304": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "306": {
      "op": "DUP1"
    },
    "307": {
      "op": "REVERT"
    },
    "308": {
      "op": "JUMPDEST"
    },
    "309": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP3",
      "path": "9"
    },
    "310": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "311": {
      "op": "DUP4"
    },
    "312": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "314": {
      "op": "DUP3"
    },
    "315": {
      "op": "ADD"
    },
    "316": {
      "op": "GT"
    },
    "317": {
      "op": "ISZERO"
    },
    "318": {
      "op": "PUSH2",
      "value": "0x146"
    },
    "321": {
      "op": "JUMPI"
    },
    "322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "324": {
      "op": "DUP1"
    },
    "325": {
      "op": "REVERT"
    },
    "326": {
      "op": "JUMPDEST"
    },
    "327": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "DUP1",
      "path": "9"
    },
    "328": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "329": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "330": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "332": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "ADD",
      "path": "9"
    },
    "333": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "334": {
      "op": "DUP5"
    },
    "335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "337": {
      "op": "DUP4"
    },
    "338": {
      "op": "MUL"
    },
    "339": {
      "op": "DUP5"
    },
    "340": {
      "op": "ADD"
    },
    "341": {
      "op": "GT"
    },
    "342": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "348": {
      "op": "DUP4"
    },
    "349": {
      "op": "GT"
    },
    "350": {
      "op": "OR"
    },
    "351": {
      "op": "ISZERO"
    },
    "352": {
      "op": "PUSH2",
      "value": "0x168"
    },
    "355": {
      "op": "JUMPI"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "358": {
      "op": "DUP1"
    },
    "359": {
      "op": "REVERT"
    },
    "360": {
      "op": "JUMPDEST"
    },
    "361": {
      "op": "POP"
    },
    "362": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "363": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "364": {
      "op": "POP"
    },
    "365": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "366": {
      "op": "POP"
    },
    "367": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x4A9"
    },
    "370": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        2191,
        3053
      ],
      "op": "JUMP",
      "path": "9"
    },
    "371": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "372": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "STOP",
      "path": "9"
    },
    "373": {
      "offset": [
        593,
        640
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "374": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x17D"
    },
    "377": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x798"
    },
    "380": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        593,
        640
      ],
      "op": "JUMP",
      "path": "9"
    },
    "381": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "382": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "384": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "DUP1",
      "path": "9"
    },
    "385": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "386": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "387": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "DUP3",
      "path": "9"
    },
    "388": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "389": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "390": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "391": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "DUP2",
      "path": "9"
    },
    "392": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "393": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "SUB",
      "path": "9"
    },
    "394": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "396": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "ADD",
      "path": "9"
    },
    "397": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "398": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        593,
        640
      ],
      "op": "RETURN",
      "path": "9"
    },
    "399": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "400": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x173"
    },
    "403": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "405": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "DUP1",
      "path": "9"
    },
    "406": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "CALLDATASIZE",
      "path": "9"
    },
    "407": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "SUB",
      "path": "9"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "410": {
      "op": "DUP2"
    },
    "411": {
      "op": "LT"
    },
    "412": {
      "op": "ISZERO"
    },
    "413": {
      "op": "PUSH2",
      "value": "0x1A5"
    },
    "416": {
      "op": "JUMPI"
    },
    "417": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "419": {
      "op": "DUP1"
    },
    "420": {
      "op": "REVERT"
    },
    "421": {
      "op": "JUMPDEST"
    },
    "422": {
      "op": "POP"
    },
    "423": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "DUP1",
      "path": "9"
    },
    "424": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "425": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "426": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "428": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "DUP2",
      "path": "9"
    },
    "429": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "ADD",
      "path": "9"
    },
    "430": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "431": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "436": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "438": {
      "op": "SHL"
    },
    "439": {
      "op": "SUB"
    },
    "440": {
      "op": "NOT"
    },
    "441": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "443": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "DUP3",
      "path": "9"
    },
    "444": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "ADD",
      "path": "9"
    },
    "445": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "446": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "AND",
      "path": "9"
    },
    "447": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "448": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x60"
    },
    "450": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "ADD",
      "path": "9"
    },
    "451": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "CALLDATALOAD",
      "path": "9"
    },
    "452": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x79E"
    },
    "455": {
      "fn": "MockOracle.cancelOracleRequest",
      "jump": "i",
      "offset": [
        4817,
        5298
      ],
      "op": "JUMP",
      "path": "9"
    },
    "456": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "457": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x173"
    },
    "460": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "462": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "463": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "464": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SUB",
      "path": "0"
    },
    "465": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "467": {
      "op": "DUP2"
    },
    "468": {
      "op": "LT"
    },
    "469": {
      "op": "ISZERO"
    },
    "470": {
      "op": "PUSH2",
      "value": "0x1DE"
    },
    "473": {
      "op": "JUMPI"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "476": {
      "op": "DUP1"
    },
    "477": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1371
      ],
      "op": "REVERT",
      "path": "0"
    },
    "478": {
      "op": "JUMPDEST"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "481": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "483": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "485": {
      "op": "SHL"
    },
    "486": {
      "op": "SUB"
    },
    "487": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP3",
      "path": "0"
    },
    "488": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "489": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "AND",
      "path": "0"
    },
    "490": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "491": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "493": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "494": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "495": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "496": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "497": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "498": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "499": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "500": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "502": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "503": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "504": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "506": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP3",
      "path": "0"
    },
    "507": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "508": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "509": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "515": {
      "op": "DUP2"
    },
    "516": {
      "op": "GT"
    },
    "517": {
      "op": "ISZERO"
    },
    "518": {
      "op": "PUSH2",
      "value": "0x20E"
    },
    "521": {
      "op": "JUMPI"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "524": {
      "op": "DUP1"
    },
    "525": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1371
      ],
      "op": "REVERT",
      "path": "0"
    },
    "526": {
      "op": "JUMPDEST"
    },
    "527": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP3",
      "path": "0"
    },
    "528": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "529": {
      "op": "DUP4"
    },
    "530": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "532": {
      "op": "DUP3"
    },
    "533": {
      "op": "ADD"
    },
    "534": {
      "op": "GT"
    },
    "535": {
      "op": "ISZERO"
    },
    "536": {
      "op": "PUSH2",
      "value": "0x220"
    },
    "539": {
      "op": "JUMPI"
    },
    "540": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "542": {
      "op": "DUP1"
    },
    "543": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1371
      ],
      "op": "REVERT",
      "path": "0"
    },
    "544": {
      "op": "JUMPDEST"
    },
    "545": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "546": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "547": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "548": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "550": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "551": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "552": {
      "op": "DUP5"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "555": {
      "op": "DUP4"
    },
    "556": {
      "op": "MUL"
    },
    "557": {
      "op": "DUP5"
    },
    "558": {
      "op": "ADD"
    },
    "559": {
      "op": "GT"
    },
    "560": {
      "op": "PUSH5",
      "value": "0x100000000"
    },
    "566": {
      "op": "DUP4"
    },
    "567": {
      "op": "GT"
    },
    "568": {
      "op": "OR"
    },
    "569": {
      "op": "ISZERO"
    },
    "570": {
      "op": "PUSH2",
      "value": "0x242"
    },
    "573": {
      "op": "JUMPI"
    },
    "574": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "576": {
      "op": "DUP1"
    },
    "577": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1371
      ],
      "op": "REVERT",
      "path": "0"
    },
    "578": {
      "op": "JUMPDEST"
    },
    "579": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "580": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "581": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "582": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "583": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "585": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "586": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "588": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "589": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "590": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DIV",
      "path": "0"
    },
    "591": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "MUL",
      "path": "0"
    },
    "592": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "594": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "595": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "597": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "598": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "599": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "600": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "601": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "603": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "604": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "605": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "606": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "607": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "608": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "609": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "610": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "611": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "612": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "614": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "ADD",
      "path": "0"
    },
    "615": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP4",
      "path": "0"
    },
    "616": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "DUP4",
      "path": "0"
    },
    "617": {
      "op": "DUP1"
    },
    "618": {
      "op": "DUP3"
    },
    "619": {
      "op": "DUP5"
    },
    "620": {
      "op": "CALLDATACOPY"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "623": {
      "op": "SWAP3"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "SWAP2"
    },
    "626": {
      "op": "SWAP1"
    },
    "627": {
      "op": "SWAP2"
    },
    "628": {
      "op": "MSTORE"
    },
    "629": {
      "op": "POP"
    },
    "630": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "631": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "632": {
      "op": "POP"
    },
    "633": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x91C"
    },
    "636": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "637": {
      "op": "POP"
    },
    "638": {
      "op": "POP"
    },
    "639": {
      "op": "POP"
    },
    "640": {
      "op": "POP"
    },
    "641": {
      "op": "POP"
    },
    "642": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "jump": "i",
      "offset": [
        750,
        1413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "643": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "644": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5576,
        5583
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "646": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5608,
        5617
      ],
      "op": "SLOAD",
      "path": "9",
      "statement": 0
    },
    "647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "651": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "653": {
      "op": "SHL"
    },
    "654": {
      "op": "SUB"
    },
    "655": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5608,
        5617
      ],
      "op": "AND",
      "path": "9"
    },
    "656": {
      "fn": "MockOracle.getChainlinkToken",
      "offset": [
        5501,
        5623
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "657": {
      "fn": "MockOracle.getChainlinkToken",
      "jump": "o",
      "offset": [
        5501,
        5623
      ],
      "op": "JUMP",
      "path": "9"
    },
    "658": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "659": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3692,
        3696
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "661": {
      "offset": [
        5837,
        5860
      ],
      "op": "DUP3",
      "path": "9"
    },
    "662": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "DUP2",
      "path": "9"
    },
    "663": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "664": {
      "offset": [
        5837,
        5848
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "666": {
      "offset": [
        5837,
        5860
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "668": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "669": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "671": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "DUP2",
      "path": "9"
    },
    "672": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5837,
        5860
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "673": {
      "offset": [
        5837,
        5873
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "674": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3667,
        3677
      ],
      "op": "DUP4",
      "path": "9"
    },
    "675": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3667,
        3677
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "678": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "680": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "682": {
      "op": "SHL"
    },
    "683": {
      "op": "SUB"
    },
    "684": {
      "offset": [
        5837,
        5873
      ],
      "op": "AND",
      "path": "9"
    },
    "685": {
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2FD"
    },
    "688": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "689": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "691": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "DUP1",
      "path": "9"
    },
    "692": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "693": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "697": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "699": {
      "op": "SHL"
    },
    "700": {
      "offset": [
        5829,
        5919
      ],
      "op": "DUP2",
      "path": "9"
    },
    "701": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "702": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "704": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "706": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "DUP3",
      "path": "9"
    },
    "707": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "ADD",
      "path": "9"
    },
    "708": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "709": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1B"
    },
    "711": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "713": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "DUP3",
      "path": "9"
    },
    "714": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "ADD",
      "path": "9"
    },
    "715": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "716": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0x4D757374206861766520612076616C6964207265717565737449640000000000"
    },
    "749": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "751": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "DUP3",
      "path": "9"
    },
    "752": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "ADD",
      "path": "9"
    },
    "753": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "754": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "755": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "756": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "757": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "DUP2",
      "path": "9"
    },
    "758": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "759": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "SUB",
      "path": "9"
    },
    "760": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "762": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "ADD",
      "path": "9"
    },
    "763": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "764": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "REVERT",
      "path": "9"
    },
    "765": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        5829,
        5919
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "766": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3724
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x305"
    },
    "769": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3724
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xBAA"
    },
    "772": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "i",
      "offset": [
        3706,
        3724
      ],
      "op": "JUMP",
      "path": "9"
    },
    "773": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3724
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "774": {
      "op": "POP"
    },
    "775": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "777": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP5",
      "path": "9"
    },
    "778": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP2",
      "path": "9"
    },
    "779": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "780": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3738
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "782": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "784": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP2",
      "path": "9"
    },
    "785": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP2",
      "path": "9"
    },
    "786": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "787": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "789": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP1",
      "path": "9"
    },
    "790": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "DUP5",
      "path": "9"
    },
    "791": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3727,
        3750
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "792": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP2",
      "path": "9"
    },
    "793": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "794": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP1",
      "path": "9"
    },
    "795": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP4",
      "path": "9"
    },
    "796": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "ADD",
      "path": "9"
    },
    "797": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "798": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "799": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "800": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP1",
      "path": "9"
    },
    "801": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "808": {
      "op": "SHL"
    },
    "809": {
      "op": "SUB"
    },
    "810": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP2",
      "path": "9"
    },
    "811": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "AND",
      "path": "9"
    },
    "812": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP4",
      "path": "9"
    },
    "813": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "814": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "818": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "820": {
      "op": "SHL"
    },
    "821": {
      "op": "SUB"
    },
    "822": {
      "op": "NOT"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "825": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "827": {
      "op": "SHL"
    },
    "828": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP3",
      "path": "9"
    },
    "829": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DIV",
      "path": "9"
    },
    "830": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xE0"
    },
    "832": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "SHL",
      "path": "9"
    },
    "833": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "AND",
      "path": "9"
    },
    "834": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP4",
      "path": "9"
    },
    "835": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "DUP6",
      "path": "9"
    },
    "836": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "ADD",
      "path": "9"
    },
    "837": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3706,
        3750
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "838": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP5",
      "path": "9",
      "statement": 1
    },
    "839": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "DUP10",
      "path": "9"
    },
    "840": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "841": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "842": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "843": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "844": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "845": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3763,
        3786
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "850": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "852": {
      "op": "SHL"
    },
    "853": {
      "op": "SUB"
    },
    "854": {
      "op": "NOT"
    },
    "855": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3756,
        3786
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "856": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3756,
        3786
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "857": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3756,
        3786
      ],
      "op": "AND",
      "path": "9"
    },
    "858": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3756,
        3786
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "859": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3756,
        3786
      ],
      "op": "SSTORE",
      "path": "9"
    },
    "860": {
      "offset": [
        698,
        704
      ],
      "op": "PUSH3",
      "path": "9",
      "value": "0x61A80"
    },
    "864": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3800,
        3809
      ],
      "op": "GAS",
      "path": "9",
      "statement": 2
    },
    "865": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3800,
        3839
      ],
      "op": "LT",
      "path": "9"
    },
    "866": {
      "branch": 14,
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3800,
        3839
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "867": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x3B3"
    },
    "870": {
      "branch": 14,
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "871": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "873": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP1",
      "path": "9"
    },
    "874": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "875": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "879": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "881": {
      "op": "SHL"
    },
    "882": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP2",
      "path": "9"
    },
    "883": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "884": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "886": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "888": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP3",
      "path": "9"
    },
    "889": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "ADD",
      "path": "9"
    },
    "890": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP2",
      "path": "9"
    },
    "891": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "892": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "893": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "895": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP3",
      "path": "9"
    },
    "896": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "ADD",
      "path": "9"
    },
    "897": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "898": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173"
    },
    "931": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "933": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP3",
      "path": "9"
    },
    "934": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "ADD",
      "path": "9"
    },
    "935": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "936": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "937": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "938": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "939": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "DUP2",
      "path": "9"
    },
    "940": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "941": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SUB",
      "path": "9"
    },
    "942": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "944": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "ADD",
      "path": "9"
    },
    "945": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "946": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "REVERT",
      "path": "9"
    },
    "947": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3792,
        3876
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "948": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4176
      ],
      "op": "DUP1",
      "path": "9"
    },
    "949": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4176
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "950": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4205,
        4227
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "952": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4205,
        4227
      ],
      "op": "DUP1",
      "path": "9"
    },
    "953": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4205,
        4227
      ],
      "op": "DUP4",
      "path": "9"
    },
    "954": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4205,
        4227
      ],
      "op": "ADD",
      "path": "9"
    },
    "955": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4205,
        4227
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "956": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "958": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP1",
      "path": "9"
    },
    "959": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "960": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "962": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP2",
      "path": "9"
    },
    "963": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "ADD",
      "path": "9"
    },
    "964": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP11",
      "path": "9"
    },
    "965": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "966": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "967": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "969": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP1",
      "path": "9"
    },
    "970": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP3",
      "path": "9"
    },
    "971": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "ADD",
      "path": "9"
    },
    "972": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP11",
      "path": "9"
    },
    "973": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "974": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "975": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP3",
      "path": "9"
    },
    "976": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "977": {
      "op": "DUP1"
    },
    "978": {
      "op": "DUP4"
    },
    "979": {
      "op": "SUB"
    },
    "980": {
      "op": "SWAP1"
    },
    "981": {
      "op": "SWAP2"
    },
    "982": {
      "op": "ADD"
    },
    "983": {
      "op": "DUP2"
    },
    "984": {
      "op": "MSTORE"
    },
    "985": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "987": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "988": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "989": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "ADD",
      "path": "9"
    },
    "990": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "DUP3",
      "path": "9"
    },
    "991": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "992": {
      "op": "SWAP3"
    },
    "993": {
      "op": "DUP4"
    },
    "994": {
      "op": "ADD"
    },
    "995": {
      "op": "DUP1"
    },
    "996": {
      "op": "MLOAD"
    },
    "997": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "999": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1003": {
      "op": "SHL"
    },
    "1004": {
      "op": "SUB"
    },
    "1005": {
      "op": "AND"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1008": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1010": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1012": {
      "op": "SHL"
    },
    "1013": {
      "op": "SUB"
    },
    "1014": {
      "op": "NOT"
    },
    "1015": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1016": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "1017": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "AND",
      "path": "9"
    },
    "1018": {
      "op": "SWAP3"
    },
    "1019": {
      "op": "SWAP1"
    },
    "1020": {
      "op": "SWAP3"
    },
    "1021": {
      "op": "OR"
    },
    "1022": {
      "op": "DUP3"
    },
    "1023": {
      "op": "MSTORE"
    },
    "1024": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1025": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1026": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1027": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4154
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1029": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4142,
        4154
      ],
      "op": "SWAP5",
      "path": "9"
    },
    "1030": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1034": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1036": {
      "op": "SHL"
    },
    "1037": {
      "op": "SUB"
    },
    "1038": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4181
      ],
      "op": "AND",
      "path": "9"
    },
    "1039": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4181
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "1040": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4182,
        4247
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "1041": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1042": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1043": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1044": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1045": {
      "op": "DUP4"
    },
    "1046": {
      "op": "JUMPDEST"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1049": {
      "op": "DUP4"
    },
    "1050": {
      "op": "LT"
    },
    "1051": {
      "op": "PUSH2",
      "value": "0x435"
    },
    "1054": {
      "op": "JUMPI"
    },
    "1055": {
      "op": "DUP1"
    },
    "1056": {
      "op": "MLOAD"
    },
    "1057": {
      "op": "DUP3"
    },
    "1058": {
      "op": "MSTORE"
    },
    "1059": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1061": {
      "op": "NOT"
    },
    "1062": {
      "op": "SWAP1"
    },
    "1063": {
      "op": "SWAP3"
    },
    "1064": {
      "op": "ADD"
    },
    "1065": {
      "op": "SWAP2"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1068": {
      "op": "SWAP2"
    },
    "1069": {
      "op": "DUP3"
    },
    "1070": {
      "op": "ADD"
    },
    "1071": {
      "op": "SWAP2"
    },
    "1072": {
      "op": "ADD"
    },
    "1073": {
      "op": "PUSH2",
      "value": "0x416"
    },
    "1076": {
      "op": "JUMP"
    },
    "1077": {
      "op": "JUMPDEST"
    },
    "1078": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1080": {
      "op": "DUP4"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1083": {
      "op": "SUB"
    },
    "1084": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1087": {
      "op": "EXP"
    },
    "1088": {
      "op": "SUB"
    },
    "1089": {
      "op": "DUP1"
    },
    "1090": {
      "op": "NOT"
    },
    "1091": {
      "op": "DUP3"
    },
    "1092": {
      "op": "MLOAD"
    },
    "1093": {
      "op": "AND"
    },
    "1094": {
      "op": "DUP2"
    },
    "1095": {
      "op": "DUP5"
    },
    "1096": {
      "op": "MLOAD"
    },
    "1097": {
      "op": "AND"
    },
    "1098": {
      "op": "DUP1"
    },
    "1099": {
      "op": "DUP3"
    },
    "1100": {
      "op": "OR"
    },
    "1101": {
      "op": "DUP6"
    },
    "1102": {
      "op": "MSTORE"
    },
    "1103": {
      "op": "POP"
    },
    "1104": {
      "op": "POP"
    },
    "1105": {
      "op": "POP"
    },
    "1106": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1107": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1108": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1109": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1110": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1111": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "ADD",
      "path": "9"
    },
    "1112": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1113": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1114": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1115": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1117": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1119": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1120": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1121": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1122": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "SUB",
      "path": "9"
    },
    "1123": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1124": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1126": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "DUP7",
      "path": "9"
    },
    "1127": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "GAS",
      "path": "9"
    },
    "1128": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "CALL",
      "path": "9"
    },
    "1129": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1130": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1131": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "POP",
      "path": "9"
    },
    "1132": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4160,
        4248
      ],
      "op": "RETURNDATASIZE",
      "path": "9"
    },
    "1133": {
      "op": "DUP1"
    },
    "1134": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1136": {
      "op": "DUP2"
    },
    "1137": {
      "op": "EQ"
    },
    "1138": {
      "op": "PUSH2",
      "value": "0x497"
    },
    "1141": {
      "op": "JUMPI"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1144": {
      "op": "MLOAD"
    },
    "1145": {
      "op": "SWAP2"
    },
    "1146": {
      "op": "POP"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1149": {
      "op": "NOT"
    },
    "1150": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "1152": {
      "op": "RETURNDATASIZE"
    },
    "1153": {
      "op": "ADD"
    },
    "1154": {
      "op": "AND"
    },
    "1155": {
      "op": "DUP3"
    },
    "1156": {
      "op": "ADD"
    },
    "1157": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1159": {
      "op": "MSTORE"
    },
    "1160": {
      "op": "RETURNDATASIZE"
    },
    "1161": {
      "op": "DUP3"
    },
    "1162": {
      "op": "MSTORE"
    },
    "1163": {
      "op": "RETURNDATASIZE"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1166": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1168": {
      "op": "DUP5"
    },
    "1169": {
      "op": "ADD"
    },
    "1170": {
      "op": "RETURNDATACOPY"
    },
    "1171": {
      "op": "PUSH2",
      "value": "0x49C"
    },
    "1174": {
      "op": "JUMP"
    },
    "1175": {
      "op": "JUMPDEST"
    },
    "1176": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1178": {
      "op": "SWAP2"
    },
    "1179": {
      "op": "POP"
    },
    "1180": {
      "op": "JUMPDEST"
    },
    "1181": {
      "op": "POP"
    },
    "1182": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4141,
        4248
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1183": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        4141,
        4248
      ],
      "op": "SWAP8",
      "path": "9"
    },
    "1184": {
      "fn": "MockOracle.fulfillOracleRequest",
      "offset": [
        3558,
        4319
      ],
      "op": "SWAP7",
      "path": "9"
    },
    "1185": {
      "op": "POP"
    },
    "1186": {
      "op": "POP"
    },
    "1187": {
      "op": "POP"
    },
    "1188": {
      "op": "POP"
    },
    "1189": {
      "op": "POP"
    },
    "1190": {
      "op": "POP"
    },
    "1191": {
      "op": "POP"
    },
    "1192": {
      "fn": "MockOracle.fulfillOracleRequest",
      "jump": "o",
      "offset": [
        3558,
        4319
      ],
      "op": "JUMP",
      "path": "9"
    },
    "1193": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1194": {
      "offset": [
        1598,
        1617
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4B1"
    },
    "1197": {
      "offset": [
        1598,
        1615
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x283"
    },
    "1200": {
      "jump": "i",
      "offset": [
        1598,
        1617
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1201": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1598,
        1617
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1206": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1208": {
      "op": "SHL"
    },
    "1209": {
      "op": "SUB"
    },
    "1210": {
      "offset": [
        1584,
        1617
      ],
      "op": "AND",
      "path": "0"
    },
    "1211": {
      "offset": [
        1584,
        1594
      ],
      "op": "CALLER",
      "path": "0"
    },
    "1212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1218": {
      "op": "SHL"
    },
    "1219": {
      "op": "SUB"
    },
    "1220": {
      "offset": [
        1584,
        1617
      ],
      "op": "AND",
      "path": "0"
    },
    "1221": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1584,
        1617
      ],
      "op": "EQ",
      "path": "0"
    },
    "1222": {
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x50C"
    },
    "1225": {
      "offset": [
        1576,
        1641
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1226": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1228": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1229": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1230": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1236": {
      "op": "SHL"
    },
    "1237": {
      "offset": [
        1576,
        1641
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1238": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1239": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1241": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1243": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1244": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "1245": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1246": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x13"
    },
    "1248": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "1250": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1251": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "1252": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1253": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "1275": {
      "op": "SHL"
    },
    "1276": {
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "1278": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1279": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "1280": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1281": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1282": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1283": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1284": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1285": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1286": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "SUB",
      "path": "0"
    },
    "1287": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "1289": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "1290": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1291": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1292": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        1576,
        1641
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1293": {
      "offset": [
        6117,
        6126
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1295": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6117,
        6126
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "1296": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2482,
        2498
      ],
      "op": "DUP7",
      "path": "9"
    },
    "1297": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2482,
        2498
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1304": {
      "op": "SHL"
    },
    "1305": {
      "op": "SUB"
    },
    "1306": {
      "offset": [
        6102,
        6127
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1307": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6102,
        6127
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1308": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6102,
        6127
      ],
      "op": "AND",
      "path": "9"
    },
    "1309": {
      "offset": [
        6117,
        6126
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1310": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6117,
        6126
      ],
      "op": "AND",
      "path": "9"
    },
    "1311": {
      "offset": [
        6102,
        6127
      ],
      "op": "EQ",
      "path": "9"
    },
    "1312": {
      "branch": 15,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6102,
        6127
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "1313": {
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x571"
    },
    "1316": {
      "branch": 15,
      "offset": [
        6094,
        6155
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "1317": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1319": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1320": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1321": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1327": {
      "op": "SHL"
    },
    "1328": {
      "offset": [
        6094,
        6155
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1329": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1330": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1332": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "1334": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1335": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "ADD",
      "path": "9"
    },
    "1336": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1337": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x17"
    },
    "1339": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "1341": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1342": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "ADD",
      "path": "9"
    },
    "1343": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1344": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000"
    },
    "1377": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "1379": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1380": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "ADD",
      "path": "9"
    },
    "1381": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1382": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1383": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1384": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1385": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1386": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1387": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "SUB",
      "path": "9"
    },
    "1388": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "1390": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "ADD",
      "path": "9"
    },
    "1391": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1392": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "REVERT",
      "path": "9"
    },
    "1393": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6094,
        6155
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1394": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1396": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1397": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1398": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "1411": {
      "op": "NOT"
    },
    "1412": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x60"
    },
    "1414": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1415": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1416": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SHL",
      "path": "9"
    },
    "1417": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "AND",
      "path": "9"
    },
    "1418": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1420": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1421": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1422": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "ADD",
      "path": "9"
    },
    "1423": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1424": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1425": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1426": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1427": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x34"
    },
    "1429": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1430": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1431": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "ADD",
      "path": "9"
    },
    "1432": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP10",
      "path": "9"
    },
    "1433": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1434": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1435": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1436": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1437": {
      "op": "DUP1"
    },
    "1438": {
      "op": "DUP5"
    },
    "1439": {
      "op": "SUB"
    },
    "1440": {
      "op": "SWAP1"
    },
    "1441": {
      "op": "SWAP2"
    },
    "1442": {
      "op": "ADD"
    },
    "1443": {
      "op": "DUP2"
    },
    "1444": {
      "op": "MSTORE"
    },
    "1445": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x54"
    },
    "1447": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1448": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "1449": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "ADD",
      "path": "9"
    },
    "1450": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1451": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2538,
        2571
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1452": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1453": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1454": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1455": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1456": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "ADD",
      "path": "9"
    },
    "1457": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1458": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1459": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1460": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2528,
        2572
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "1461": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2508,
        2525
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1463": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "DUP2",
      "path": "9",
      "statement": 3
    },
    "1464": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1465": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1466": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2597
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "1468": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1469": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "1470": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1471": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "1472": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1473": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2608
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "1474": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2621
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1479": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1481": {
      "op": "SHL"
    },
    "1482": {
      "op": "SUB"
    },
    "1483": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2621
      ],
      "op": "AND",
      "path": "9"
    },
    "1484": {
      "branch": 16,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2586,
        2635
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "1485": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x614"
    },
    "1488": {
      "branch": 16,
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "1489": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1491": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1492": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1493": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1497": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1499": {
      "op": "SHL"
    },
    "1500": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1501": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1502": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1504": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "1506": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1507": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "ADD",
      "path": "9"
    },
    "1508": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1509": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x14"
    },
    "1511": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "1513": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1514": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "ADD",
      "path": "9"
    },
    "1515": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1516": {
      "op": "PUSH20",
      "value": "0x135D5CDD081D5CD94818481D5B9A5C5D59481251"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "1539": {
      "op": "SHL"
    },
    "1540": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "1542": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1543": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "ADD",
      "path": "9"
    },
    "1544": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1545": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1546": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1547": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1548": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1549": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1550": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "SUB",
      "path": "9"
    },
    "1551": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "1553": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "ADD",
      "path": "9"
    },
    "1554": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1555": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "REVERT",
      "path": "9"
    },
    "1556": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2578,
        2660
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1557": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2716,
        2734
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1559": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2757
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x628"
    },
    "1562": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2740
      ],
      "op": "TIMESTAMP",
      "path": "9"
    },
    "1563": {
      "offset": [
        631,
        640
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x12C"
    },
    "1566": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2757
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xFFFFFFFF"
    },
    "1571": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2744
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xB49"
    },
    "1574": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2757
      ],
      "op": "AND",
      "path": "9"
    },
    "1575": {
      "fn": "MockOracle.oracleRequest",
      "jump": "i",
      "offset": [
        2737,
        2757
      ],
      "op": "JUMP",
      "path": "9"
    },
    "1576": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2737,
        2757
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1577": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2716,
        2757
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1578": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2716,
        2757
      ],
      "op": "POP",
      "path": "9"
    },
    "1579": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 4,
      "value": "0x40"
    },
    "1581": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1582": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1583": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1585": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1586": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1588": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1589": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1590": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2806,
        2822
      ],
      "op": "DUP11",
      "path": "9"
    },
    "1591": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1595": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1597": {
      "op": "SHL"
    },
    "1598": {
      "op": "SUB"
    },
    "1599": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "AND",
      "path": "9"
    },
    "1600": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1601": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1602": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1604": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1605": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2832,
        2851
      ],
      "op": "DUP10",
      "path": "9"
    },
    "1606": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1608": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1610": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1612": {
      "op": "SHL"
    },
    "1613": {
      "op": "SUB"
    },
    "1614": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "NOT",
      "path": "9"
    },
    "1615": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "AND",
      "path": "9"
    },
    "1616": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1617": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1618": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2789,
        2857
      ],
      "op": "POP",
      "path": "9"
    },
    "1619": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2775
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "1621": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1623": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2776,
        2785
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1624": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1625": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1626": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1628": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "ADD",
      "path": "9"
    },
    "1629": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1630": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1631": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1632": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1634": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "ADD",
      "path": "9"
    },
    "1635": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1637": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2786
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "1638": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1640": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1641": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1642": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1643": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1644": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1646": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1647": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1649": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x100"
    },
    "1652": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "EXP",
      "path": "9"
    },
    "1653": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1654": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "1655": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1656": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1660": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1662": {
      "op": "SHL"
    },
    "1663": {
      "op": "SUB"
    },
    "1664": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MUL",
      "path": "9"
    },
    "1665": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "NOT",
      "path": "9"
    },
    "1666": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "AND",
      "path": "9"
    },
    "1667": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1668": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1669": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1671": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1673": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1675": {
      "op": "SHL"
    },
    "1676": {
      "op": "SUB"
    },
    "1677": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "AND",
      "path": "9"
    },
    "1678": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MUL",
      "path": "9"
    },
    "1679": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "OR",
      "path": "9"
    },
    "1680": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1681": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SSTORE",
      "path": "9"
    },
    "1682": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "POP",
      "path": "9"
    },
    "1683": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1685": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1686": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1687": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1688": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1689": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "1691": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "ADD",
      "path": "9"
    },
    "1692": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x14"
    },
    "1694": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x100"
    },
    "1697": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "EXP",
      "path": "9"
    },
    "1698": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1699": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "1700": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1701": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xFFFFFFFF"
    },
    "1706": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MUL",
      "path": "9"
    },
    "1707": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "NOT",
      "path": "9"
    },
    "1708": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "AND",
      "path": "9"
    },
    "1709": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1710": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "DUP4",
      "path": "9"
    },
    "1711": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0xE0"
    },
    "1713": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SHR",
      "path": "9"
    },
    "1714": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "MUL",
      "path": "9"
    },
    "1715": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "OR",
      "path": "9"
    },
    "1716": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1717": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SSTORE",
      "path": "9"
    },
    "1718": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "POP",
      "path": "9"
    },
    "1719": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1720": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "POP",
      "path": "9"
    },
    "1721": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2764,
        2857
      ],
      "op": "POP",
      "path": "9"
    },
    "1722": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2890,
        2897
      ],
      "op": "DUP10",
      "path": "9",
      "statement": 5
    },
    "1723": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65"
    },
    "1756": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2905,
        2912
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1757": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2920,
        2929
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1758": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2937,
        2945
      ],
      "op": "DUP15",
      "path": "9"
    },
    "1759": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2953,
        2969
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1760": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2977,
        2996
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1761": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3004,
        3014
      ],
      "op": "DUP8",
      "path": "9"
    },
    "1762": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3022,
        3034
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1763": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3042,
        3047
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1764": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        3042,
        3047
      ],
      "op": "DUP14",
      "path": "9"
    },
    "1765": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1767": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1768": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1769": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP11",
      "path": "9"
    },
    "1770": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1772": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1774": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1776": {
      "op": "SHL"
    },
    "1777": {
      "op": "SUB"
    },
    "1778": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1781": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1783": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1785": {
      "op": "SHL"
    },
    "1786": {
      "op": "SUB"
    },
    "1787": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1788": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1789": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1790": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1792": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1793": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP10",
      "path": "9"
    },
    "1794": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1795": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1796": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1798": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1799": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP9",
      "path": "9"
    },
    "1800": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1801": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1802": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1804": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1805": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP8",
      "path": "9"
    },
    "1806": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1808": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1812": {
      "op": "SHL"
    },
    "1813": {
      "op": "SUB"
    },
    "1814": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1817": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1819": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1821": {
      "op": "SHL"
    },
    "1822": {
      "op": "SUB"
    },
    "1823": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1824": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1825": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1826": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1828": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1829": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP7",
      "path": "9"
    },
    "1830": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1832": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1836": {
      "op": "SHL"
    },
    "1837": {
      "op": "SUB"
    },
    "1838": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "NOT",
      "path": "9"
    },
    "1839": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1840": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1844": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1846": {
      "op": "SHL"
    },
    "1847": {
      "op": "SUB"
    },
    "1848": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "NOT",
      "path": "9"
    },
    "1849": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "AND",
      "path": "9"
    },
    "1850": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1851": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1852": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1854": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1855": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP6",
      "path": "9"
    },
    "1856": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1857": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1858": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1860": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1861": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1862": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1863": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1864": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1866": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1867": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1868": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1870": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1871": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1872": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1873": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SUB",
      "path": "9"
    },
    "1874": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1875": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1876": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1877": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1878": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1879": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1880": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1881": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1882": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1884": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "ADD",
      "path": "9"
    },
    "1885": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "1886": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "POP",
      "path": "9"
    },
    "1887": {
      "op": "DUP1"
    },
    "1888": {
      "op": "DUP3"
    },
    "1889": {
      "op": "DUP5"
    },
    "1890": {
      "op": "CALLDATACOPY"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1893": {
      "op": "DUP4"
    },
    "1894": {
      "op": "DUP3"
    },
    "1895": {
      "op": "ADD"
    },
    "1896": {
      "op": "MSTORE"
    },
    "1897": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1899": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1900": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1902": {
      "op": "SWAP1"
    },
    "1903": {
      "op": "SWAP2"
    },
    "1904": {
      "op": "ADD"
    },
    "1905": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1907": {
      "op": "NOT"
    },
    "1908": {
      "op": "AND"
    },
    "1909": {
      "op": "SWAP1"
    },
    "1910": {
      "op": "SWAP3"
    },
    "1911": {
      "op": "ADD"
    },
    "1912": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1913": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1914": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SUB",
      "path": "9"
    },
    "1915": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SWAP13",
      "path": "9"
    },
    "1916": {
      "op": "POP"
    },
    "1917": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1918": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "SWAP11",
      "path": "9"
    },
    "1919": {
      "op": "POP"
    },
    "1920": {
      "op": "POP"
    },
    "1921": {
      "op": "POP"
    },
    "1922": {
      "op": "POP"
    },
    "1923": {
      "op": "POP"
    },
    "1924": {
      "op": "POP"
    },
    "1925": {
      "op": "POP"
    },
    "1926": {
      "op": "POP"
    },
    "1927": {
      "op": "POP"
    },
    "1928": {
      "op": "POP"
    },
    "1929": {
      "op": "POP"
    },
    "1930": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2869,
        3048
      ],
      "op": "LOG2",
      "path": "9"
    },
    "1931": {
      "offset": [
        6161,
        6162
      ],
      "op": "POP",
      "path": "9"
    },
    "1932": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        6161,
        6162
      ],
      "op": "POP",
      "path": "9"
    },
    "1933": {
      "offset": [
        1647,
        1648
      ],
      "op": "POP",
      "path": "0"
    },
    "1934": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1935": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1936": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1937": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1938": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1939": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1940": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1941": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1942": {
      "fn": "MockOracle.oracleRequest",
      "offset": [
        2191,
        3053
      ],
      "op": "POP",
      "path": "9"
    },
    "1943": {
      "fn": "MockOracle.oracleRequest",
      "jump": "o",
      "offset": [
        2191,
        3053
      ],
      "op": "JUMP",
      "path": "9"
    },
    "1944": {
      "offset": [
        593,
        640
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1945": {
      "offset": [
        631,
        640
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x12C"
    },
    "1948": {
      "offset": [
        593,
        640
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1949": {
      "fn": "MockOracle.oracleRequest",
      "jump": "o",
      "offset": [
        593,
        640
      ],
      "op": "JUMP",
      "path": "9"
    },
    "1950": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "1951": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5023,
        5024
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 6,
      "value": "0x0"
    },
    "1953": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "DUP5",
      "path": "9"
    },
    "1954": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1955": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1956": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4986
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "1958": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1960": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1961": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1963": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "1964": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        4998
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "1965": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        5011
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "1966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1972": {
      "op": "SHL"
    },
    "1973": {
      "op": "SUB"
    },
    "1974": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4975,
        5011
      ],
      "op": "AND",
      "path": "9"
    },
    "1975": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x7FE"
    },
    "1978": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "1979": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "1981": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP1",
      "path": "9"
    },
    "1982": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "1983": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1987": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1989": {
      "op": "SHL"
    },
    "1990": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP2",
      "path": "9"
    },
    "1991": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1992": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "1994": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "1996": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP3",
      "path": "9"
    },
    "1997": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "ADD",
      "path": "9"
    },
    "1998": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "1999": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x14"
    },
    "2001": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "2003": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2004": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "ADD",
      "path": "9"
    },
    "2005": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2006": {
      "op": "PUSH20",
      "value": "0x135D5CDD081D5CD94818481D5B9A5C5D59481251"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "2029": {
      "op": "SHL"
    },
    "2030": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "2032": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2033": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "ADD",
      "path": "9"
    },
    "2034": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2035": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2036": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2037": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2038": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2039": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2040": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "SUB",
      "path": "9"
    },
    "2041": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "2043": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "ADD",
      "path": "9"
    },
    "2044": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2045": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "REVERT",
      "path": "9"
    },
    "2046": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4967,
        5050
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "2047": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5129,
        5132
      ],
      "op": "TIMESTAMP",
      "path": "9",
      "statement": 7
    },
    "2048": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5114,
        5125
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2049": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5114,
        5132
      ],
      "op": "GT",
      "path": "9"
    },
    "2050": {
      "branch": 17,
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5114,
        5132
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "2051": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x84C"
    },
    "2054": {
      "branch": 17,
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "2055": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "2057": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2058": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2059": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2063": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2065": {
      "op": "SHL"
    },
    "2066": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2067": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2068": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "2070": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "2072": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2073": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "ADD",
      "path": "9"
    },
    "2074": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2075": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x16"
    },
    "2077": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "2079": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2080": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "ADD",
      "path": "9"
    },
    "2081": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2082": {
      "op": "PUSH22",
      "value": "0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959"
    },
    "2105": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "2107": {
      "op": "SHL"
    },
    "2108": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "2110": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2111": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "ADD",
      "path": "9"
    },
    "2112": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2113": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2114": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2115": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2116": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2117": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2118": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "SUB",
      "path": "9"
    },
    "2119": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x64"
    },
    "2121": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "ADD",
      "path": "9"
    },
    "2122": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2123": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "REVERT",
      "path": "9"
    },
    "2124": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5106,
        5159
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "2125": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 8,
      "value": "0x0"
    },
    "2127": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "DUP5",
      "path": "9"
    },
    "2128": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2129": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2130": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5184
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1"
    },
    "2132": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "2134": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2135": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "2137": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2138": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2139": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5173,
        5196
      ],
      "op": "KECCAK256",
      "path": "9"
    },
    "2140": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5166,
        5196
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2141": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5166,
        5196
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2144": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2146": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2148": {
      "op": "SHL"
    },
    "2149": {
      "op": "SUB"
    },
    "2150": {
      "op": "NOT"
    },
    "2151": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5166,
        5196
      ],
      "op": "AND",
      "path": "9"
    },
    "2152": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5166,
        5196
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2153": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5166,
        5196
      ],
      "op": "SSTORE",
      "path": "9"
    },
    "2154": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5207,
        5238
      ],
      "op": "MLOAD",
      "path": "9",
      "statement": 9
    },
    "2155": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5185,
        5195
      ],
      "op": "DUP6",
      "path": "9"
    },
    "2156": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5185,
        5195
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "2157": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5207,
        5238
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93"
    },
    "2190": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5207,
        5238
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "2191": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5207,
        5238
      ],
      "op": "LOG2",
      "path": "9"
    },
    "2192": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 10,
      "value": "0x0"
    },
    "2194": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2195": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "SLOAD",
      "path": "9"
    },
    "2196": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "2198": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2199": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2200": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "2205": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2207": {
      "op": "SHL"
    },
    "2208": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2209": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2210": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5271,
        5281
      ],
      "op": "CALLER",
      "path": "9"
    },
    "2211": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "2213": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2214": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ADD",
      "path": "9"
    },
    "2215": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2216": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "2218": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP2",
      "path": "9"
    },
    "2219": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ADD",
      "path": "9"
    },
    "2220": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP8",
      "path": "9"
    },
    "2221": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2222": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2223": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2224": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2227": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2229": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2231": {
      "op": "SHL"
    },
    "2232": {
      "op": "SUB"
    },
    "2233": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2234": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "2235": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "AND",
      "path": "9"
    },
    "2236": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "2237": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5270
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xA9059CBB"
    },
    "2242": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5270
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "2243": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x44"
    },
    "2245": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2246": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP5",
      "path": "9"
    },
    "2247": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ADD",
      "path": "9"
    },
    "2248": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "2249": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "2251": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "2252": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2253": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP4",
      "path": "9"
    },
    "2254": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2255": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SUB",
      "path": "9"
    },
    "2256": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2257": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "2258": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ADD",
      "path": "9"
    },
    "2259": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2260": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2261": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2262": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5261
      ],
      "op": "DUP8",
      "path": "9"
    },
    "2263": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2264": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "EXTCODESIZE",
      "path": "9"
    },
    "2265": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "2266": {
      "op": "DUP1"
    },
    "2267": {
      "op": "ISZERO"
    },
    "2268": {
      "op": "PUSH2",
      "value": "0x8E4"
    },
    "2271": {
      "op": "JUMPI"
    },
    "2272": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2274": {
      "op": "DUP1"
    },
    "2275": {
      "op": "REVERT"
    },
    "2276": {
      "op": "JUMPDEST"
    },
    "2277": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "POP",
      "path": "9"
    },
    "2278": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "GAS",
      "path": "9"
    },
    "2279": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "CALL",
      "path": "9"
    },
    "2280": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "2281": {
      "op": "DUP1"
    },
    "2282": {
      "op": "ISZERO"
    },
    "2283": {
      "op": "PUSH2",
      "value": "0x8F8"
    },
    "2286": {
      "op": "JUMPI"
    },
    "2287": {
      "op": "RETURNDATASIZE"
    },
    "2288": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2290": {
      "op": "DUP1"
    },
    "2291": {
      "op": "RETURNDATACOPY"
    },
    "2292": {
      "op": "RETURNDATASIZE"
    },
    "2293": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2295": {
      "op": "REVERT"
    },
    "2296": {
      "op": "JUMPDEST"
    },
    "2297": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "POP",
      "path": "9"
    },
    "2298": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "POP",
      "path": "9"
    },
    "2299": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "POP",
      "path": "9"
    },
    "2300": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "POP",
      "path": "9"
    },
    "2301": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "2303": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2304": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "RETURNDATASIZE",
      "path": "9"
    },
    "2305": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2307": {
      "op": "DUP2"
    },
    "2308": {
      "op": "LT"
    },
    "2309": {
      "op": "ISZERO"
    },
    "2310": {
      "op": "PUSH2",
      "value": "0x90E"
    },
    "2313": {
      "op": "JUMPI"
    },
    "2314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2316": {
      "op": "DUP1"
    },
    "2317": {
      "op": "REVERT"
    },
    "2318": {
      "op": "JUMPDEST"
    },
    "2319": {
      "op": "POP"
    },
    "2320": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5252,
        5292
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2321": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5245,
        5293
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x916"
    },
    "2324": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5245,
        5293
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "2325": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5245,
        5293
      ],
      "op": "INVALID",
      "path": "9"
    },
    "2326": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        5245,
        5293
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "2327": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "POP",
      "path": "9"
    },
    "2328": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "POP",
      "path": "9"
    },
    "2329": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "POP",
      "path": "9"
    },
    "2330": {
      "fn": "MockOracle.cancelOracleRequest",
      "offset": [
        4817,
        5298
      ],
      "op": "POP",
      "path": "9"
    },
    "2331": {
      "fn": "MockOracle.cancelOracleRequest",
      "jump": "o",
      "offset": [
        4817,
        5298
      ],
      "op": "JUMP",
      "path": "9"
    },
    "2332": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2333": {
      "offset": [
        1598,
        1617
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x924"
    },
    "2336": {
      "offset": [
        1598,
        1615
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x283"
    },
    "2339": {
      "jump": "i",
      "offset": [
        1598,
        1617
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2340": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1598,
        1617
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2341": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2343": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2347": {
      "op": "SHL"
    },
    "2348": {
      "op": "SUB"
    },
    "2349": {
      "offset": [
        1584,
        1617
      ],
      "op": "AND",
      "path": "0"
    },
    "2350": {
      "offset": [
        1584,
        1594
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2351": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2353": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2355": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2357": {
      "op": "SHL"
    },
    "2358": {
      "op": "SUB"
    },
    "2359": {
      "offset": [
        1584,
        1617
      ],
      "op": "AND",
      "path": "0"
    },
    "2360": {
      "branch": 18,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1584,
        1617
      ],
      "op": "EQ",
      "path": "0"
    },
    "2361": {
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x97F"
    },
    "2364": {
      "branch": 18,
      "offset": [
        1576,
        1641
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2365": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2367": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2368": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2369": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2373": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2375": {
      "op": "SHL"
    },
    "2376": {
      "offset": [
        1576,
        1641
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2377": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2378": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2380": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2382": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2383": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "2384": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2385": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x13"
    },
    "2387": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "2389": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2390": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "2391": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2392": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "2412": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "2414": {
      "op": "SHL"
    },
    "2415": {
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2417": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2418": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "2419": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2420": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2421": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2422": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2423": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2424": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2425": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "SUB",
      "path": "0"
    },
    "2426": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "2428": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "ADD",
      "path": "0"
    },
    "2429": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2430": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2431": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1576,
        1641
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2432": {
      "offset": [
        2310,
        2322
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2433": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2310,
        2322
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2434": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        892,
        897
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2435": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        892,
        897
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2436": {
      "offset": [
        315,
        362
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2438": {
      "op": "GT"
    },
    "2439": {
      "offset": [
        2310,
        2348
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2440": {
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9D1"
    },
    "2443": {
      "offset": [
        2302,
        2375
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2444": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2446": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2447": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2448": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2452": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2454": {
      "op": "SHL"
    },
    "2455": {
      "offset": [
        2302,
        2375
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2456": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2457": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2459": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2461": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2462": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "ADD",
      "path": "0"
    },
    "2463": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2464": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x16"
    },
    "2466": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "2468": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2469": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "ADD",
      "path": "0"
    },
    "2470": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2471": {
      "op": "PUSH22",
      "value": "0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D"
    },
    "2494": {
      "op": "PUSH1",
      "value": "0x53"
    },
    "2496": {
      "op": "SHL"
    },
    "2497": {
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2499": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2500": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "ADD",
      "path": "0"
    },
    "2501": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2502": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2503": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2504": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2505": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2506": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2507": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "SUB",
      "path": "0"
    },
    "2508": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "2510": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "ADD",
      "path": "0"
    },
    "2511": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2512": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2513": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2302,
        2375
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2514": {
      "offset": [
        2006,
        2008
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2516": {
      "offset": [
        1995,
        2009
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2517": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1995,
        2009
      ],
      "op": "ADD",
      "path": "0"
    },
    "2518": {
      "offset": [
        1989,
        2010
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2519": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        929,
        934
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2520": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        929,
        934
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2521": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2523": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2525": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2527": {
      "op": "SHL"
    },
    "2528": {
      "op": "SUB"
    },
    "2529": {
      "op": "NOT"
    },
    "2530": {
      "offset": [
        2029,
        2068
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2531": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2029,
        2068
      ],
      "op": "AND",
      "path": "0"
    },
    "2532": {
      "op": "PUSH4",
      "value": "0x20214CA3"
    },
    "2537": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2539": {
      "op": "SHL"
    },
    "2540": {
      "offset": [
        2029,
        2068
      ],
      "op": "EQ",
      "path": "0"
    },
    "2541": {
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3D"
    },
    "2544": {
      "offset": [
        2021,
        2103
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2545": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2547": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2548": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2549": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2555": {
      "op": "SHL"
    },
    "2556": {
      "offset": [
        2021,
        2103
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2557": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2558": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2560": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2562": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2563": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "ADD",
      "path": "0"
    },
    "2564": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2565": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1E"
    },
    "2567": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "2569": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2570": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "ADD",
      "path": "0"
    },
    "2571": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2572": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x4D757374207573652077686974656C69737465642066756E6374696F6E730000"
    },
    "2605": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2607": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2608": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "ADD",
      "path": "0"
    },
    "2609": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2610": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2611": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2612": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2613": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2614": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2615": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "SUB",
      "path": "0"
    },
    "2616": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "2618": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "ADD",
      "path": "0"
    },
    "2619": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2620": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2621": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2021,
        2103
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2622": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1041,
        1048
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2623": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1036,
        1038
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "2625": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1029,
        1034
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2626": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1025,
        1039
      ],
      "op": "ADD",
      "path": "0"
    },
    "2627": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1018,
        1049
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2628": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1171,
        1178
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2629": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1166,
        1168
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2631": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1159,
        1164
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2632": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1155,
        1169
      ],
      "op": "ADD",
      "path": "0"
    },
    "2633": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1148,
        1179
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2634": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1284,
        1296
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2636": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1310,
        1314
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "2637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2643": {
      "op": "SHL"
    },
    "2644": {
      "op": "SUB"
    },
    "2645": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1328
      ],
      "op": "AND",
      "path": "0"
    },
    "2646": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1329,
        1334
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2647": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2649": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2650": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2651": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2652": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2653": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2654": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2655": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2657": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "ADD",
      "path": "0"
    },
    "2658": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2659": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2660": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2661": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2662": {
      "op": "JUMPDEST"
    },
    "2663": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2665": {
      "op": "DUP4"
    },
    "2666": {
      "op": "LT"
    },
    "2667": {
      "op": "PUSH2",
      "value": "0xA85"
    },
    "2670": {
      "op": "JUMPI"
    },
    "2671": {
      "op": "DUP1"
    },
    "2672": {
      "op": "MLOAD"
    },
    "2673": {
      "op": "DUP3"
    },
    "2674": {
      "op": "MSTORE"
    },
    "2675": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2677": {
      "op": "NOT"
    },
    "2678": {
      "op": "SWAP1"
    },
    "2679": {
      "op": "SWAP3"
    },
    "2680": {
      "op": "ADD"
    },
    "2681": {
      "op": "SWAP2"
    },
    "2682": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2684": {
      "op": "SWAP2"
    },
    "2685": {
      "op": "DUP3"
    },
    "2686": {
      "op": "ADD"
    },
    "2687": {
      "op": "SWAP2"
    },
    "2688": {
      "op": "ADD"
    },
    "2689": {
      "op": "PUSH2",
      "value": "0xA66"
    },
    "2692": {
      "op": "JUMP"
    },
    "2693": {
      "op": "JUMPDEST"
    },
    "2694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2696": {
      "op": "DUP4"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2699": {
      "op": "SUB"
    },
    "2700": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2703": {
      "op": "EXP"
    },
    "2704": {
      "op": "SUB"
    },
    "2705": {
      "op": "DUP1"
    },
    "2706": {
      "op": "NOT"
    },
    "2707": {
      "op": "DUP3"
    },
    "2708": {
      "op": "MLOAD"
    },
    "2709": {
      "op": "AND"
    },
    "2710": {
      "op": "DUP2"
    },
    "2711": {
      "op": "DUP5"
    },
    "2712": {
      "op": "MLOAD"
    },
    "2713": {
      "op": "AND"
    },
    "2714": {
      "op": "DUP1"
    },
    "2715": {
      "op": "DUP3"
    },
    "2716": {
      "op": "OR"
    },
    "2717": {
      "op": "DUP6"
    },
    "2718": {
      "op": "MSTORE"
    },
    "2719": {
      "op": "POP"
    },
    "2720": {
      "op": "POP"
    },
    "2721": {
      "op": "POP"
    },
    "2722": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2723": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2724": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2725": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2726": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2727": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "ADD",
      "path": "0"
    },
    "2728": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2729": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2730": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2731": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2733": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2735": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2736": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2737": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2738": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SUB",
      "path": "0"
    },
    "2739": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2740": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2741": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "GAS",
      "path": "0"
    },
    "2742": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "DELEGATECALL",
      "path": "0"
    },
    "2743": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2744": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2745": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2746": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1302,
        1335
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2747": {
      "op": "DUP1"
    },
    "2748": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2750": {
      "op": "DUP2"
    },
    "2751": {
      "op": "EQ"
    },
    "2752": {
      "op": "PUSH2",
      "value": "0xAE5"
    },
    "2755": {
      "op": "JUMPI"
    },
    "2756": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2758": {
      "op": "MLOAD"
    },
    "2759": {
      "op": "SWAP2"
    },
    "2760": {
      "op": "POP"
    },
    "2761": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2763": {
      "op": "NOT"
    },
    "2764": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2766": {
      "op": "RETURNDATASIZE"
    },
    "2767": {
      "op": "ADD"
    },
    "2768": {
      "op": "AND"
    },
    "2769": {
      "op": "DUP3"
    },
    "2770": {
      "op": "ADD"
    },
    "2771": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2773": {
      "op": "MSTORE"
    },
    "2774": {
      "op": "RETURNDATASIZE"
    },
    "2775": {
      "op": "DUP3"
    },
    "2776": {
      "op": "MSTORE"
    },
    "2777": {
      "op": "RETURNDATASIZE"
    },
    "2778": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2782": {
      "op": "DUP5"
    },
    "2783": {
      "op": "ADD"
    },
    "2784": {
      "op": "RETURNDATACOPY"
    },
    "2785": {
      "op": "PUSH2",
      "value": "0xAEA"
    },
    "2788": {
      "op": "JUMP"
    },
    "2789": {
      "op": "JUMPDEST"
    },
    "2790": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2792": {
      "op": "SWAP2"
    },
    "2793": {
      "op": "POP"
    },
    "2794": {
      "op": "JUMPDEST"
    },
    "2795": {
      "op": "POP"
    },
    "2796": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1283,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2797": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1283,
        1335
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2798": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1283,
        1335
      ],
      "op": "POP",
      "path": "0"
    },
    "2799": {
      "branch": 19,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1372,
        1379
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 11
    },
    "2800": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB40"
    },
    "2803": {
      "branch": 19,
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2804": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2806": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2807": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2808": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2812": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2814": {
      "op": "SHL"
    },
    "2815": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2816": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2817": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2819": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2821": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2822": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "ADD",
      "path": "0"
    },
    "2823": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2824": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x18"
    },
    "2826": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "2828": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2829": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "ADD",
      "path": "0"
    },
    "2830": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2831": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x556E61626C6520746F2063726561746520726571756573740000000000000000"
    },
    "2864": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "2866": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2867": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "ADD",
      "path": "0"
    },
    "2868": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2869": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2870": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2871": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2872": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2873": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2874": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "SUB",
      "path": "0"
    },
    "2875": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "2877": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "ADD",
      "path": "0"
    },
    "2878": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2879": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2880": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        1364,
        1408
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2881": {
      "offset": [
        2109,
        2110
      ],
      "op": "POP",
      "path": "0"
    },
    "2882": {
      "offset": [
        2381,
        2382
      ],
      "op": "POP",
      "path": "0"
    },
    "2883": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        2381,
        2382
      ],
      "op": "POP",
      "path": "0"
    },
    "2884": {
      "offset": [
        1647,
        1648
      ],
      "op": "POP",
      "path": "0"
    },
    "2885": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "POP",
      "path": "0"
    },
    "2886": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "POP",
      "path": "0"
    },
    "2887": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "offset": [
        750,
        1413
      ],
      "op": "POP",
      "path": "0"
    },
    "2888": {
      "fn": "LinkTokenReceiver.onTokenTransfer",
      "jump": "o",
      "offset": [
        750,
        1413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2889": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        863,
        1025
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2890": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        921,
        928
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "2892": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        948,
        953
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2893": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        948,
        953
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2894": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        948,
        953
      ],
      "op": "ADD",
      "path": "8"
    },
    "2895": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        967,
        973
      ],
      "op": "DUP4",
      "path": "8",
      "statement": 12
    },
    "2896": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        967,
        973
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2897": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        967,
        973
      ],
      "op": "LT",
      "path": "8"
    },
    "2898": {
      "branch": 20,
      "fn": "SafeMathChainlink.add",
      "offset": [
        967,
        973
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "2899": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xBA3"
    },
    "2902": {
      "branch": 20,
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "2903": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "2905": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP1",
      "path": "8"
    },
    "2906": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2907": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2911": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2913": {
      "op": "SHL"
    },
    "2914": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2915": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2916": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "2918": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "2920": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2921": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "ADD",
      "path": "8"
    },
    "2922": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2923": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1B"
    },
    "2925": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x24"
    },
    "2927": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2928": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "ADD",
      "path": "8"
    },
    "2929": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2930": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH32",
      "path": "8",
      "value": "0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
    },
    "2963": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x44"
    },
    "2965": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP3",
      "path": "8"
    },
    "2966": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "ADD",
      "path": "8"
    },
    "2967": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "2968": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2969": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "2970": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2971": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "DUP2",
      "path": "8"
    },
    "2972": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2973": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "SUB",
      "path": "8"
    },
    "2974": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x64"
    },
    "2976": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "ADD",
      "path": "8"
    },
    "2977": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "2978": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "REVERT",
      "path": "8"
    },
    "2979": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        959,
        1005
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "2980": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        1019,
        1020
      ],
      "op": "SWAP4",
      "path": "8",
      "statement": 13
    },
    "2981": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        863,
        1025
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "2982": {
      "op": "POP"
    },
    "2983": {
      "op": "POP"
    },
    "2984": {
      "op": "POP"
    },
    "2985": {
      "fn": "SafeMathChainlink.add",
      "jump": "o",
      "offset": [
        863,
        1025
      ],
      "op": "JUMP",
      "path": "8"
    },
    "2986": {
      "offset": [
        481,
        6170
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "2987": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "2989": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2990": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "2991": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "2992": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "DUP3",
      "path": "9"
    },
    "2993": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "ADD",
      "path": "9"
    },
    "2994": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "2995": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "2996": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "2997": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2999": {
      "offset": [
        481,
        6170
      ],
      "op": "DUP1",
      "path": "9"
    },
    "3000": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "DUP3",
      "path": "9"
    },
    "3001": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "3002": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "3004": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "DUP3",
      "path": "9"
    },
    "3005": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "ADD",
      "path": "9"
    },
    "3006": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "3007": {
      "fn": "SafeMathChainlink.add",
      "offset": [
        481,
        6170
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "3008": {
      "fn": "SafeMathChainlink.add",
      "jump": "o",
      "offset": [
        481,
        6170
      ],
      "op": "JUMP",
      "path": "9"
    }
  },
  "sha1": "2a60682c64f2757011c395ef0ad0901b97593a4d",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\";\nimport \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\";\n\n/**\n * @title The Chainlink Mock Oracle contract\n * @notice Chainlink smart contract developers can use this to test their contracts\n */\ncontract MockOracle is ChainlinkRequestInterface, LinkTokenReceiver {\n  using SafeMathChainlink for uint256;\n\n  uint256 constant public EXPIRY_TIME = 5 minutes;\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\n  \n  struct Request {\n      address callbackAddr;\n      bytes4 callbackFunctionId;\n  }\n\n  LinkTokenInterface internal LinkToken;\n  mapping(bytes32 => Request) private commitments;\n\n  event OracleRequest(\n    bytes32 indexed specId,\n    address requester,\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddr,\n    bytes4 callbackFunctionId,\n    uint256 cancelExpiration,\n    uint256 dataVersion,\n    bytes data\n  );\n\n  event CancelOracleRequest(\n    bytes32 indexed requestId\n  );\n\n  /**\n   * @notice Deploy with the address of the LINK token\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\n   * @param _link The address of the LINK token\n   */\n  constructor(address _link)\n    public\n  {\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\n  }\n\n  /**\n   * @notice Creates the Chainlink request\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\n   * Emits OracleRequest event for the Chainlink node to detect.\n   * @param _sender The sender of the request\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _specId The Job Specification ID\n   * @param _callbackAddress The callback address for the response\n   * @param _callbackFunctionId The callback function ID for the response\n   * @param _nonce The nonce sent by the requester\n   * @param _dataVersion The specified data version\n   * @param _data The CBOR payload of the request\n   */\n  function oracleRequest(\n    address _sender,\n    uint256 _payment,\n    bytes32 _specId,\n    address _callbackAddress,\n    bytes4 _callbackFunctionId,\n    uint256 _nonce,\n    uint256 _dataVersion,\n    bytes calldata _data\n  )\n    external\n    override\n    onlyLINK()\n    checkCallbackAddress(_callbackAddress)\n  {\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\n    require(commitments[requestId].callbackAddr == address(0), \"Must use a unique ID\");\n    // solhint-disable-next-line not-rely-on-time\n    uint256 expiration = now.add(EXPIRY_TIME);\n\n    commitments[requestId] = Request(\n        _callbackAddress,\n        _callbackFunctionId\n    );\n\n    emit OracleRequest(\n      _specId,\n      _sender,\n      requestId,\n      _payment,\n      _callbackAddress,\n      _callbackFunctionId,\n      expiration,\n      _dataVersion,\n      _data);\n  }\n\n  /**\n   * @notice Called by the Chainlink node to fulfill requests\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\n   * Will call the callback address' callback function without bubbling up error\n   * checking in a `require` so that the node can get paid.\n   * @param _requestId The fulfillment request ID that must match the requester's\n   * @param _data The data to return to the consuming contract\n   * @return Status if the external call was successful\n   */\n  function fulfillOracleRequest(\n    bytes32 _requestId,\n    bytes32 _data\n  )\n    external\n    isValidRequest(_requestId)\n    returns (bool)\n  {\n    Request memory req = commitments[_requestId];\n    delete commitments[_requestId];\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\n    // All updates to the oracle's fulfillment should come before calling the\n    // callback(addr+functionId) as it is untrusted.\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\n    (bool success, ) = req.callbackAddr.call(abi.encodeWithSelector(req.callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\n    return success;\n  }\n\n  /**\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\n   * sent for the request back to the requester's address.\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\n   * Emits CancelOracleRequest event.\n   * @param _requestId The request ID\n   * @param _payment The amount of payment given (specified in wei)\n   * @param _expiration The time of the expiration for the request\n   */\n  function cancelOracleRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    bytes4,\n    uint256 _expiration\n  )\n    external\n    override\n  {\n    require(commitments[_requestId].callbackAddr != address(0), \"Must use a unique ID\");\n    // solhint-disable-next-line not-rely-on-time\n    require(_expiration <= now, \"Request is not expired\");\n\n    delete commitments[_requestId];\n    emit CancelOracleRequest(_requestId);\n\n    assert(LinkToken.transfer(msg.sender, _payment));\n  }\n\n  /**\n   * @notice Returns the address of the LINK token\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\n   * an internal method of the ChainlinkClient contract\n   */\n  function getChainlinkToken()\n    public\n    view\n    override\n    returns (address)\n  {\n    return address(LinkToken);\n  }\n\n  // MODIFIERS\n\n  /**\n   * @dev Reverts if request ID does not exist\n   * @param _requestId The given request ID to check in stored `commitments`\n   */\n  modifier isValidRequest(bytes32 _requestId) {\n    require(commitments[_requestId].callbackAddr != address(0), \"Must have a valid requestId\");\n    _;\n  }\n\n\n  /**\n   * @dev Reverts if the callback address is the LINK token\n   * @param _to The callback address\n   */\n  modifier checkCallbackAddress(address _to) {\n    require(_to != address(LinkToken), \"Cannot callback to LINK\");\n    _;\n  }\n\n}\n",
  "sourceMap": "481:5689:9:-:0;;;1393:137;5:9:-1;2:2;;;27:1;24;17:12;2:2;1393:137:9;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1393:137:9;1439:9;:37;;-1:-1:-1;;;;;1439:37:9;;;-1:-1:-1;;;;;;1439:37:9;;;;;;;;;481:5689;;;;;;",
  "sourcePath": "contracts/test/MockOracle.sol",
  "type": "contract"
}